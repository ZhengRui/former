<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"><channel><title>Keep Sharp</title><link>/</link><description></description><lastBuildDate>Thu, 26 May 2016 00:00:00 +0800</lastBuildDate><item><title>Android Coordinates: Camera, OpenCV in JNI, Canvas</title><link>/android-coordinates.html</link><description>&lt;p&gt;This tip is about camera related coordinate system in android. When i develop camera related apps, inside &lt;code&gt;onPreviewFrame()&lt;/code&gt; i need to do image processing on &lt;code&gt;byte[] data&lt;/code&gt; and show results on top of the canvas and i use OpenCV for the image processing in jni. So the whole workflows is from &lt;code&gt;byte[]&lt;/code&gt; in android camera to &lt;code&gt;cv::Mat()&lt;/code&gt; in jni OpenCV and after image processing from &lt;code&gt;cv::Mat()&lt;/code&gt; to android canvas and draw results.&lt;/p&gt;
&lt;p&gt;&lt;img width="600" src="/images/androidCoords/androidCoords.png"&gt;&lt;/p&gt;
&lt;p&gt;There are two things which affects the transformation, &lt;code&gt;camera index&lt;/code&gt; and &lt;code&gt;phone orientation&lt;/code&gt;, let's say using &lt;code&gt;front1back0&lt;/code&gt; to denote &lt;code&gt;camera index&lt;/code&gt;, and using &lt;code&gt;orientCase&lt;/code&gt; to denote &lt;code&gt;phone orientation&lt;/code&gt;, &lt;code&gt;orientCase&lt;/code&gt; equals to 0,1,2,3 corresponds to &lt;img width="50" src="/images/androidCoords/iphones0.png"&gt;, &lt;img width="50" src="/images/androidCoords/iphones1.png"&gt;, &lt;img width="50" src="/images/androidCoords/iphones2.png"&gt;, &lt;img width="50" src="/images/androidCoords/iphones3.png"&gt;.&lt;/p&gt;
&lt;p&gt;Things to note:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;canvas coordinate system is always fixed&lt;/li&gt;
&lt;li&gt;android camera coordinate system only depends on &lt;code&gt;camera index&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;when using front camera, imaging you are another person who is using your phone to point at you (in other words the other person is using the back camera to look at you), that explains how camera coordinate system differs when camera changed in the above figure&lt;/li&gt;
&lt;li&gt;when plot on canvas, also need to take status bar height, menu bar height, and maybe some other component's height into considerations, &lt;strong&gt;the &lt;code&gt;(L,T)&lt;/code&gt; coordinates shown above can not be directly used unless the image is exactly the same size of canvas(no menu bar etc.), otherwise there are some scaled ratio in both L and T direction to be considered so that processed results from OpenCV can be displayed properly&lt;/strong&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I use the following snippet to get content size and scaled ratio:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="nd"&gt;@Override&lt;/span&gt;
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;onWindowFocusChanged&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;boolean&lt;/span&gt; &lt;span class="n"&gt;hasFocus&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;super&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;onWindowFocusChanged&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;hasFocus&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;

    &lt;span class="n"&gt;Rect&lt;/span&gt; &lt;span class="n"&gt;rect&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;Rect&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
    &lt;span class="n"&gt;getWindow&lt;/span&gt;&lt;span class="o"&gt;().&lt;/span&gt;&lt;span class="na"&gt;getDecorView&lt;/span&gt;&lt;span class="o"&gt;().&lt;/span&gt;&lt;span class="na"&gt;getWindowVisibleDisplayFrame&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;rect&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;View&lt;/span&gt; &lt;span class="n"&gt;v&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;getWindow&lt;/span&gt;&lt;span class="o"&gt;().&lt;/span&gt;&lt;span class="na"&gt;findViewById&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Window&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;ID_ANDROID_CONTENT&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;

    &lt;span class="n"&gt;viewHeight&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getHeight&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
    &lt;span class="n"&gt;viewWidth&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getWidth&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
    &lt;span class="n"&gt;scaleH&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;viewHeight&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mf"&gt;1.0&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;width&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;  &lt;span class="c1"&gt;// size is the camera preview size (or the cv::Mat size)&lt;/span&gt;
    &lt;span class="n"&gt;scaleW&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;viewWidth&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mf"&gt;1.0&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;height&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;Log&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;i&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;TAG&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Status bar height: &amp;quot;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;Integer&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;toString&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;rect&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;top&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; 
               &lt;span class="s"&gt;&amp;quot;, Content Top: &amp;quot;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;Integer&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;toString&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getTop&lt;/span&gt;&lt;span class="o"&gt;())&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt;
               &lt;span class="s"&gt;&amp;quot;, Content Height: &amp;quot;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;Integer&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;toString&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getHeight&lt;/span&gt;&lt;span class="o"&gt;())&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt;
               &lt;span class="s"&gt;&amp;quot;, Content Width: &amp;quot;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;Integer&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;toString&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getWidth&lt;/span&gt;&lt;span class="o"&gt;())&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt;
               &lt;span class="s"&gt;&amp;quot;, Content / CameraView ratio H: &amp;quot;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;scaleH&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt;
               &lt;span class="s"&gt;&amp;quot;, Content / CameraView ratio W: &amp;quot;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;scaleW&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Then &lt;code&gt;(L,T)&lt;/code&gt; should multiple &lt;code&gt;scaleW&lt;/code&gt; and &lt;code&gt;scaleH&lt;/code&gt; before draw on canvas.&lt;/p&gt;
&lt;p&gt;From android camera to OpenCV in JNI: as shown above, the raw android camera image &lt;code&gt;byte[]&lt;/code&gt; array passed to jni is usually not what we thought it should be, so we need to do some tweaking so that OpenCV sees what we thought it should see. I use the following snippet to do this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="k"&gt;switch&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;orientCase&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;  &lt;span class="c1"&gt;// cw90 for back cam, acw90 for front cam&lt;/span&gt;
            &lt;span class="n"&gt;transpose&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;  &lt;span class="c1"&gt;// m is the Mat after converting jbyte[] data from YUV420sp2BGR&lt;/span&gt;
            &lt;span class="n"&gt;flip&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;front1back0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;  &lt;span class="c1"&gt;// 0 reflection for both cam index&lt;/span&gt;
            &lt;span class="n"&gt;flip&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;  &lt;span class="c1"&gt;// cw90 for front cam, acw90 for back cam&lt;/span&gt;
            &lt;span class="n"&gt;transpose&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="n"&gt;flip&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;front1back0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;default&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Now there is another issue of how to get the orientation, there are two ways of doing this:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;use &lt;code&gt;ACCELEROMETER&lt;/code&gt; and &lt;code&gt;MAGNETIC_FIELD&lt;/code&gt; sensors from  &lt;code&gt;SensorManager&lt;/code&gt;, and get &lt;code&gt;azimuth&lt;/code&gt;, &lt;code&gt;pitch&lt;/code&gt;, and &lt;code&gt;roll&lt;/code&gt; values from sensor results. However i found it too difficult to use &lt;code&gt;azimuth&lt;/code&gt;, &lt;code&gt;pitch&lt;/code&gt; and &lt;code&gt;roll&lt;/code&gt; values to define orientation properly, see &lt;a href="http://stackoverflow.com/questions/24681350/find-the-orientation-of-the-phone-with-pitch-correction"&gt;this StackOverflow question&lt;/a&gt;, there is another useful &lt;a href="http://blog.csdn.net/octobershiner/article/details/6641942"&gt;tutorial&lt;/a&gt;. The following snippet only shows how to get &lt;code&gt;azimuth&lt;/code&gt;, &lt;code&gt;pitch&lt;/code&gt; and &lt;code&gt;roll&lt;/code&gt; values&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="nd"&gt;@Override&lt;/span&gt;
    &lt;span class="kd"&gt;protected&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;onCreate&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Bundle&lt;/span&gt; &lt;span class="n"&gt;savedInstanceState&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;sm&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;SensorManager&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="n"&gt;getSystemService&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Context&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;SENSOR_SERVICE&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
        &lt;span class="n"&gt;aSensor&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;sm&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getDefaultSensor&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Sensor&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;TYPE_ACCELEROMETER&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
        &lt;span class="n"&gt;mSensor&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;sm&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getDefaultSensor&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Sensor&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;TYPE_MAGNETIC_FIELD&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
        &lt;span class="n"&gt;sm&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;registerListener&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sListener&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;aSensor&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;SensorManager&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;SENSOR_DELAY_NORMAL&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
        &lt;span class="n"&gt;sm&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;registerListener&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sListener&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;mSensor&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;SensorManager&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;SENSOR_DELAY_NORMAL&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;

    &lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;getOrientation&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="kt"&gt;float&lt;/span&gt;&lt;span class="o"&gt;[]&lt;/span&gt; &lt;span class="n"&gt;values&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="kt"&gt;float&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="o"&gt;];&lt;/span&gt;
        &lt;span class="kt"&gt;float&lt;/span&gt;&lt;span class="o"&gt;[]&lt;/span&gt; &lt;span class="n"&gt;R&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="kt"&gt;float&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="o"&gt;];&lt;/span&gt;
        &lt;span class="n"&gt;SensorManager&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getRotationMatrix&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;R&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;accelerometerValues&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;magneticFiledValues&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
        &lt;span class="n"&gt;SensorManager&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getOrientation&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;R&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;values&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
        &lt;span class="n"&gt;values&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;float&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="n"&gt;Math&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;toDegrees&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;values&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;]);&lt;/span&gt;
        &lt;span class="n"&gt;values&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;float&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="n"&gt;Math&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;toDegrees&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;values&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;]);&lt;/span&gt;
        &lt;span class="n"&gt;values&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;float&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="n"&gt;Math&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;toDegrees&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;values&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;]);&lt;/span&gt;
        &lt;span class="n"&gt;Log&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;i&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;TAG&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;azimuth, pitch, roll: &amp;quot;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;values&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;, &amp;quot;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;values&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;, &amp;quot;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;values&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;]);&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;

    &lt;span class="kd"&gt;final&lt;/span&gt; &lt;span class="n"&gt;SensorEventListener&lt;/span&gt; &lt;span class="n"&gt;sListener&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;SensorEventListener&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="nd"&gt;@Override&lt;/span&gt;
        &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;onSensorChanged&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;SensorEvent&lt;/span&gt; &lt;span class="n"&gt;event&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;event&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;sensor&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getType&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;Sensor&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;TYPE_MAGNETIC_FIELD&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
                &lt;span class="n"&gt;magneticFiledValues&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;event&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;values&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;event&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;sensor&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getType&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;Sensor&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;TYPE_ACCELEROMETER&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
                &lt;span class="n"&gt;accelerometerValues&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;event&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;values&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
            &lt;span class="n"&gt;getOrientation&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
        &lt;span class="o"&gt;}&lt;/span&gt;
    &lt;span class="o"&gt;};&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;android provides a much easier solution &lt;code&gt;OrientationEventListener&lt;/code&gt;, it can directly get orientation (0-360&amp;deg;) from its &lt;code&gt;onOrientationChanged(int orientation)&lt;/code&gt; function, the following snippet shows how to get &lt;code&gt;orientCase&lt;/code&gt; using this method&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="nd"&gt;@Override&lt;/span&gt;
    &lt;span class="kd"&gt;protected&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;onCreate&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Bundle&lt;/span&gt; &lt;span class="n"&gt;savedInstanceState&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;mOrientationListener&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;OrientationEventListener&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
                &lt;span class="n"&gt;SensorManager&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;SENSOR_DELAY_NORMAL&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
            &lt;span class="nd"&gt;@Override&lt;/span&gt;
            &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;onOrientationChanged&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;orientation&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
                &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;((&lt;/span&gt;&lt;span class="n"&gt;orientation&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;orientation&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="mi"&gt;30&lt;/span&gt; &lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;orientation&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="mi"&gt;330&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;orientation&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="mi"&gt;360&lt;/span&gt;&lt;span class="o"&gt;))&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
                   &lt;span class="n"&gt;orientCase&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
                &lt;span class="o"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;orientation&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="mi"&gt;60&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;orientation&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="mi"&gt;120&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
                    &lt;span class="n"&gt;orientCase&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
                &lt;span class="o"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;orientation&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="mi"&gt;150&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;orientation&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="mi"&gt;210&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
                    &lt;span class="n"&gt;orientCase&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
                &lt;span class="o"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;orientation&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="mi"&gt;240&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;orientation&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="mi"&gt;300&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
                    &lt;span class="n"&gt;orientCase&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
                &lt;span class="o"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="o"&gt;{}&lt;/span&gt;
                &lt;span class="c1"&gt;//Log.i(TAG, &amp;quot;Orientation changed to &amp;quot; + orientation +&lt;/span&gt;
                &lt;span class="c1"&gt;//        &amp;quot;, case &amp;quot; + orientCase);&lt;/span&gt;
            &lt;span class="o"&gt;}&lt;/span&gt;
        &lt;span class="o"&gt;};&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;mOrientationListener&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;canDetectOrientation&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
       &lt;span class="n"&gt;mOrientationListener&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;enable&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Don't forget to do &lt;code&gt;sm.unregisterListener(sListener)&lt;/code&gt; (if use 1st method) or &lt;code&gt;mOrientationListener.disable()&lt;/code&gt; (if use 2nd method) in &lt;code&gt;onPause()&lt;/code&gt; so that these sensors also pause when the MainActivity pauses.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Zheng Rui</dc:creator><pubDate>Thu, 26 May 2016 00:00:00 +0800</pubDate><guid isPermaLink="false">tag:,2016-05-26:android-coordinates.html</guid><category>Tips</category><category>Android</category></item><item><title>ShortKeys</title><link>/shortkeys.html</link><description>&lt;h3&gt;Vim&lt;/h3&gt;
&lt;p&gt;&lt;a href="http://vim.rtorr.com/"&gt;cheatsheet&lt;/a&gt;, &lt;a href="http://vim.wikia.com/wiki/All_the_right_moves"&gt;right move&lt;/a&gt;, &lt;a href="https://gist.github.com/ZhengRui/b4c2f23970ff1cce6c26afdafe3c5f5a"&gt;My Vim and NeoVim dotfiles&lt;/a&gt;&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Mode&lt;/th&gt;
&lt;th&gt;ShortKey&lt;/th&gt;
&lt;th&gt;Effect&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Normal&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;&lt;code&gt;{&lt;/code&gt;&lt;/strong&gt; / &lt;strong&gt;&lt;code&gt;}&lt;/code&gt;&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;go to previous / next paragraph&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;&lt;code&gt;$&lt;/code&gt;&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;go to end of line&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;&lt;code&gt;^&lt;/code&gt;&lt;/strong&gt;, &lt;strong&gt;&lt;code&gt;0&lt;/code&gt;&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;go to start of line&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;&lt;code&gt;Ctrl&lt;/code&gt;+&lt;code&gt;b&lt;/code&gt;&lt;/strong&gt; / &lt;strong&gt;&lt;code&gt;Ctrl&lt;/code&gt;+&lt;code&gt;f&lt;/code&gt;&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;scroll backward / forward a whole page&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;&lt;code&gt;Ctrl&lt;/code&gt;+&lt;code&gt;u&lt;/code&gt;&lt;/strong&gt; / &lt;strong&gt;&lt;code&gt;Ctrl&lt;/code&gt;+&lt;code&gt;d&lt;/code&gt;&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;scroll backward / forward half page&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;&lt;code&gt;f&lt;/code&gt;&lt;/strong&gt; / &lt;strong&gt;&lt;code&gt;F&lt;/code&gt;&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;forward / backward search a character&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;&lt;code&gt;H&lt;/code&gt;&lt;/strong&gt; / &lt;strong&gt;&lt;code&gt;M&lt;/code&gt;&lt;/strong&gt; / &lt;strong&gt;&lt;code&gt;L&lt;/code&gt;&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;go to top / middle / foot of current page&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;&lt;code&gt;zt&lt;/code&gt;&lt;/strong&gt; / &lt;strong&gt;&lt;code&gt;z.&lt;/code&gt;&lt;/strong&gt; / &lt;strong&gt;&lt;code&gt;zb&lt;/code&gt;&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;scroll so the cursor line is in the top / middle / bottom of page&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;&lt;code&gt;;&lt;/code&gt;&lt;/strong&gt; / &lt;strong&gt;&lt;code&gt;,&lt;/code&gt;&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;repeat above move in same / reverse direction&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;&lt;code&gt;n&lt;/code&gt;&lt;/strong&gt; / &lt;strong&gt;&lt;code&gt;N&lt;/code&gt;&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;repeat search in same / reverse direction&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;&lt;code&gt;*&lt;/code&gt;&lt;/strong&gt; / &lt;strong&gt;&lt;code&gt;#&lt;/code&gt;&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;go to next / previous whole word under cursor&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;&lt;code&gt;J&lt;/code&gt;&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;Join next line to the end of current line&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;&lt;code&gt;D&lt;/code&gt;&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;delete untill the end of line&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;&lt;code&gt;C&lt;/code&gt;&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;delete untill the end of line and go to insert mode&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;&lt;code&gt;~&lt;/code&gt;&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;toggle case&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;&lt;code&gt;q:&lt;/code&gt;&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;list recent commands&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Visual&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;&lt;code&gt;ab&lt;/code&gt;&lt;/strong&gt; / &lt;strong&gt;&lt;code&gt;aB&lt;/code&gt;&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;a block with ( ) / &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;&lt;code&gt;ib&lt;/code&gt;&lt;/strong&gt; / &lt;strong&gt;&lt;code&gt;iB&lt;/code&gt;&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;inner block with ( ) / &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Insert&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;&lt;code&gt;Ctrl&lt;/code&gt;+&lt;code&gt;h&lt;/code&gt;&lt;/strong&gt; / &lt;strong&gt;&lt;code&gt;Ctrl&lt;/code&gt;+&lt;code&gt;w&lt;/code&gt;&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;delete previous character / word&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;&lt;code&gt;Ctrl&lt;/code&gt;+&lt;code&gt;u&lt;/code&gt;&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;delete untill the start of the line&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3&gt;Gnome-Terminal&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://help.gnome.org/users/gnome-terminal/stable/adv-keyboard-shortcuts.html.en"&gt;cheatsheet&lt;/a&gt;&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;ShortKey&lt;/th&gt;
&lt;th&gt;Effect&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;&lt;code&gt;Alt&lt;/code&gt;+&lt;code&gt;t&lt;/code&gt;&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;new tab&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;&lt;code&gt;Alt&lt;/code&gt;+&lt;code&gt;-&lt;/code&gt;&lt;/strong&gt; / &lt;strong&gt;&lt;code&gt;Alt&lt;/code&gt;+&lt;code&gt;=&lt;/code&gt;&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;previous / next tab&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;&lt;code&gt;Alt&lt;/code&gt;+&lt;code&gt;Shift&lt;/code&gt;+&lt;code&gt;-&lt;/code&gt;&lt;/strong&gt; / &lt;strong&gt;&lt;code&gt;Alt&lt;/code&gt;+&lt;code&gt;Shift&lt;/code&gt;+&lt;code&gt;=&lt;/code&gt;&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;move tab to left / right&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;&lt;code&gt;Alt&lt;/code&gt;+&lt;code&gt;o&lt;/code&gt;&lt;/strong&gt; / &lt;strong&gt;&lt;code&gt;Alt&lt;/code&gt;+&lt;code&gt;p&lt;/code&gt;&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;rolling bash history down / up&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;&lt;code&gt;Ctrl&lt;/code&gt;+&lt;code&gt;a&lt;/code&gt;&lt;/strong&gt; / &lt;strong&gt;&lt;code&gt;Ctrl&lt;/code&gt;+&lt;code&gt;e&lt;/code&gt;&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;go to start / end of line&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;&lt;code&gt;Ctrl&lt;/code&gt;+&lt;code&gt;h&lt;/code&gt;&lt;/strong&gt; / &lt;strong&gt;&lt;code&gt;Ctrl&lt;/code&gt;+&lt;code&gt;w&lt;/code&gt;&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;delete previous character / word&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;&lt;code&gt;Ctrl&lt;/code&gt;+&lt;code&gt;u&lt;/code&gt;&lt;/strong&gt; / &lt;strong&gt;&lt;code&gt;Ctrl&lt;/code&gt;+&lt;code&gt;k&lt;/code&gt;&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;delete untill the start / end of the line&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;&lt;code&gt;Ctrl&lt;/code&gt;+&lt;code&gt;y&lt;/code&gt;&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;paste&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;&lt;code&gt;Alt&lt;/code&gt;+&lt;code&gt;b&lt;/code&gt;&lt;/strong&gt; / &lt;strong&gt;&lt;code&gt;Alt&lt;/code&gt;+&lt;code&gt;f&lt;/code&gt;&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;move to previous / next word&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;&lt;code&gt;Alt&lt;/code&gt;+&lt;code&gt;l&lt;/code&gt;&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;ls&lt;/code&gt; command&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;&lt;a href="https://github.com/0nn0/terminal-mac-cheatsheet"&gt;cheatsheet - Mac&lt;/a&gt;, &lt;a href="http://mindonmind.github.io/notes/linux/zsh_bindkeys.html"&gt;cheatsheet - Zsh&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;i3&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://i3wm.org/docs/refcard.html"&gt;cheatsheet&lt;/a&gt;, &lt;a href="https://gist.github.com/ZhengRui/ffd7f307dfea08bebe3467d755e38c18"&gt;My i3 dotfile&lt;/a&gt;&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;ShortKey&lt;/th&gt;
&lt;th&gt;Effect&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;&lt;code&gt;Win&lt;/code&gt;+&lt;code&gt;h&lt;/code&gt;&lt;/strong&gt; / &lt;strong&gt;&lt;code&gt;Win&lt;/code&gt;+&lt;code&gt;l&lt;/code&gt;&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;focus on left / right window in tab mode&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;&lt;code&gt;Win&lt;/code&gt;+&lt;code&gt;j&lt;/code&gt;&lt;/strong&gt; / &lt;strong&gt;&lt;code&gt;Win&lt;/code&gt;+&lt;code&gt;k&lt;/code&gt;&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;focus on upper / lower window in stack mode&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;&lt;code&gt;Win&lt;/code&gt;+&lt;code&gt;Shift&lt;/code&gt;+&lt;code&gt;h&lt;/code&gt;&lt;/strong&gt; / &lt;strong&gt;&lt;code&gt;Win&lt;/code&gt;+&lt;code&gt;Shift&lt;/code&gt;+&lt;code&gt;l&lt;/code&gt;&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;move current window to left / right side in tab mode&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;&lt;code&gt;Win&lt;/code&gt;+&lt;code&gt;Shift&lt;/code&gt;+&lt;code&gt;j&lt;/code&gt;&lt;/strong&gt; / &lt;strong&gt;&lt;code&gt;Win&lt;/code&gt;+&lt;code&gt;Shift&lt;/code&gt;+&lt;code&gt;k&lt;/code&gt;&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;move current window to upper / lower side in stack mode&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;&lt;code&gt;Win&lt;/code&gt;+&lt;code&gt;Shift&lt;/code&gt;+&lt;code&gt;r&lt;/code&gt;&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;reset&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;&lt;code&gt;Win&lt;/code&gt;+&lt;code&gt;Shift&lt;/code&gt;+&lt;code&gt;g&lt;/code&gt;&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;lock screen&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;&lt;code&gt;Win&lt;/code&gt;+&lt;code&gt;Shift&lt;/code&gt;+&lt;code&gt;e&lt;/code&gt;&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;exit i3&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;&lt;code&gt;Win&lt;/code&gt;+&lt;code&gt;w&lt;/code&gt;&lt;/strong&gt; / &lt;strong&gt;&lt;code&gt;Win&lt;/code&gt;+&lt;code&gt;e&lt;/code&gt;&lt;/strong&gt; / &lt;strong&gt;&lt;code&gt;Win&lt;/code&gt;+&lt;code&gt;s&lt;/code&gt;&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;tab / split / stack mode&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;&lt;code&gt;Win&lt;/code&gt;+&lt;code&gt;Enter&lt;/code&gt;&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;open a new terminal&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;&lt;code&gt;Win&lt;/code&gt;+&lt;code&gt;d&lt;/code&gt;&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;open application launcher&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Zheng Rui</dc:creator><pubDate>Thu, 26 May 2016 00:00:00 +0800</pubDate><guid isPermaLink="false">tag:,2016-05-26:shortkeys.html</guid><category>Linux</category></item><item><title>Select PyQt4 rectangle by edge/stroke</title><link>/qt4rect-select-by-edge.html</link><description>&lt;p&gt;This tip is about how to make pyqt4 rectangle selectable by its edge (or you call it stroke), by default it's selectable by inner area. To achieve this, basically you need to subclass &lt;code&gt;QGraphicsRectItem&lt;/code&gt; and overwrite its &lt;code&gt;shape()&lt;/code&gt; function so that its shape is not an area but a stroke around its bounding path.&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;PyQt4&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;QtGui&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;QtCore&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;sys&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;QStrokeRect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;QtGui&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;QGraphicsRectItem&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;parent&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="nb"&gt;super&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;QStrokeRect&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;parent&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;strokeWidth&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;setPen&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;QtGui&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;QPen&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;QtGui&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;QColor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;255&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;QtCore&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Qt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SolidLine&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;setFlags&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;QtGui&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;QGraphicsItem&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ItemIsSelectable&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;setStrokeWidth&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;strokeWidth&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;strokeWidth&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;strokeWidth&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;shape&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;path&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;QtGui&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;QPainterPath&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;addRect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;boundingRect&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
        &lt;span class="n"&gt;pStroker&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;QtGui&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;QPainterPathStroker&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="n"&gt;pStroker&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;setWidth&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;strokeWidth&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;pStroker&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;createStroke&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;QTestView&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;QtGui&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;QGraphicsView&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;parent&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="nb"&gt;super&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;QTestView&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;parent&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;scene&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;QtGui&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;QGraphicsScene&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;scene&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;setBackgroundBrush&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;QtGui&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;QBrush&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;QtCore&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Qt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;darkGray&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;QtCore&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Qt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SolidPattern&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;setScene&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;scene&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Example&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;QtGui&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;QWidget&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;parent&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="nb"&gt;super&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Example&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;parent&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;initUI&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;initUI&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;setGeometry&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;300&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;300&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;500&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;500&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;setWindowTitle&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Select by stroke&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;gv&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;QTestView&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;gv&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;setMouseTracking&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pen&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;QtGui&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;QPen&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;QtGui&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;QColor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;255&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;QtCore&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Qt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SolidLine&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;gv&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;scene&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;addRect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;QtCore&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;QRectF&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;400&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;400&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pen&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;gv&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;scene&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;addItem&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;QStrokeRect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;QtCore&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;QRectF&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;gv&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;scene&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;addItem&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;QStrokeRect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;QtCore&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;QRectF&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;150&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;150&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;__main__&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;app&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;QtGui&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;QApplication&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;argv&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;ex&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Example&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;ex&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;show&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;exec_&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;Example: the big outer rectangle &lt;code&gt;QGraphicsRectItem&lt;/code&gt; can not select by edge, but the inner two small rectangles &lt;code&gt;QStrokeRect&lt;/code&gt; can be slect by edge.
&lt;img width="600" src="images/qt4StrokeRect/qt4strokerect.gif"&gt;&lt;/p&gt;
&lt;p&gt;Gist &lt;a href="https://gist.github.com/ZhengRui/12c4bb43ac0d3e0c2e645d2669add76c"&gt;pyqt4RectSelectByStroke.py&lt;/a&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Zheng Rui</dc:creator><pubDate>Wed, 25 May 2016 00:00:00 +0800</pubDate><guid isPermaLink="false">tag:,2016-05-25:qt4rect-select-by-edge.html</guid><category>Tips</category><category>Python</category><category>PyQt4</category></item><item><title>Update Matplotlib Plot</title><link>/update-matplotlib-plot.html</link><description>&lt;p&gt;This tip is about how to update matplotlib plot, it is based on this great tutorial: &lt;a href="http://bastibe.de/2013-05-30-speeding-up-matplotlib.html"&gt;Speeding up Matplotlib&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;I learned two ways of updating matplotlib plot, both require first manually change the content of objects that to be updated. For example, &lt;code&gt;lineObj.set_ydata()&lt;/code&gt; for line object, &lt;code&gt;vlinesObj.set_paths()&lt;/code&gt; for vlines object. After that, you can do either of the following two things to update the plot:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;simpler but slower: use &lt;code&gt;canvas.draw()&lt;/code&gt; to redraw every objects inside the canvas.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;faster but require more knowledge of how things work underhood: since &lt;code&gt;canvas.draw()&lt;/code&gt; may do some repetitive work of redrawing some objects like axis, legends which may don't need to be updated, there should be many ways to lower the amount of work in this updation step if you are a master of matplotlib. The way i learned is first restore canvas from a prestored background using &lt;code&gt;canvas.restore_region()&lt;/code&gt;, and then only update the objects i want to update using &lt;code&gt;ax.draw_artist(obj)&lt;/code&gt; rather than a whole canvas, and at last use &lt;code&gt;canvas.update()&lt;/code&gt; to update the canvas.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Test:&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
66
67
68
69
70
71
72
73
74
75
76
77
78&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="ch"&gt;#! /usr/bin/env python&lt;/span&gt;

&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;matplotlib&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;matplotlib.pyplot&lt;/span&gt; &lt;span class="kn"&gt;as&lt;/span&gt; &lt;span class="nn"&gt;plt&lt;/span&gt;
&lt;span class="n"&gt;matplotlib&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;style&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;use&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;ggplot&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;numpy&lt;/span&gt; &lt;span class="kn"&gt;as&lt;/span&gt; &lt;span class="nn"&gt;np&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;time&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;newfig&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;fig&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ax&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;plt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;subplots&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;figsize&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="n"&gt;fig&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;show&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;fig&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;tight_layout&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="c1"&gt;#obj, = ax.plot(np.random.rand(l))  # normal line plot&lt;/span&gt;
    &lt;span class="n"&gt;obj&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ax&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;vlines&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;arange&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ones&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;alpha&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mf"&gt;0.5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;linewidths&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mf"&gt;400.&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;   &lt;span class="c1"&gt;# vlines return line collection&lt;/span&gt;

    &lt;span class="n"&gt;obj&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;remove&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="c1"&gt;# if using restore from bg method, bg should not contain lines; comment this line if use canvas.draw() method&lt;/span&gt;
    &lt;span class="n"&gt;fig&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;canvas&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;draw&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;bg&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;fig&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;canvas&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;copy_from_bbox&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ax&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;bbox&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;fig&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ax&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;bg&lt;/span&gt;


&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;LiveFig&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;fig&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ax&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;bg&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;newfig&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;update&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;h&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="c1"&gt;## update data&lt;/span&gt;
        &lt;span class="c1"&gt;#self.obj.set_ydata(h)  # for normal line plot&lt;/span&gt;

        &lt;span class="n"&gt;segs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;zeros&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;h&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="c1"&gt;# for vlines&lt;/span&gt;
        &lt;span class="n"&gt;segs&lt;/span&gt;&lt;span class="p"&gt;[:,&lt;/span&gt; &lt;span class="p"&gt;:,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;arange&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;h&lt;/span&gt;&lt;span class="p"&gt;))[:,&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;newaxis&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
        &lt;span class="n"&gt;segs&lt;/span&gt;&lt;span class="p"&gt;[:,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;h&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;obj&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;set_paths&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;segs&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="c1"&gt;############################################################&lt;/span&gt;
        &lt;span class="c1"&gt;## way1: update canvas by default, if use this then should not do obj.remove() above&lt;/span&gt;

        &lt;span class="c1"&gt;#  self.fig.canvas.draw()&lt;/span&gt;
        &lt;span class="c1"&gt;############################################################&lt;/span&gt;

        &lt;span class="c1"&gt;############################################################&lt;/span&gt;
        &lt;span class="c1"&gt;## way2: update canvas partially, faster but fig cannot be resized, if use this&lt;/span&gt;
        &lt;span class="c1"&gt;## then should do obj.remove() above before saving background&lt;/span&gt;

        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;fig&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;canvas&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;restore_region&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;bg&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ax&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;draw_artist&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;fig&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;canvas&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;update&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="c1"&gt;############################################################&lt;/span&gt;


        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;fig&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;canvas&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;flush_events&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;  &lt;span class="c1"&gt;# entering Qt event loop, both methods require this&lt;/span&gt;


&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;__main__&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;l1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;300&lt;/span&gt;
    &lt;span class="n"&gt;fig1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;LiveFig&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;l1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="n"&gt;l2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;400&lt;/span&gt;
    &lt;span class="n"&gt;fig2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;LiveFig&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;l2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="n"&gt;tstart&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;numfrm&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
    &lt;span class="n"&gt;tdelta&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;
    &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;tstart&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;tdelta&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;h1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;random&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;rand&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;l1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;fig1&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;update&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;h1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="n"&gt;h2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;random&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;rand&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;l2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;fig2&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;update&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;h2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="n"&gt;numfrm&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;

    &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;fps: &amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;numfrm&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="n"&gt;tdelta&lt;/span&gt;
    &lt;span class="nb"&gt;raw_input&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Press any key to exit.&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;Example:&lt;/p&gt;
&lt;p&gt;&lt;div class="videobox"&gt;
            &lt;video width="None" height="None" preload="none" controls poster="None"&gt;&lt;source src='/videos/updateMatplotlibPlot/updateMatplotlibPlot.mp4' type='video/mp4; codecs="avc1.42E01E, mp4a.40.2"'&gt;&lt;/video&gt;&lt;/div&gt;&lt;/p&gt;
&lt;p&gt;Gist &lt;a href="https://gist.github.com/ZhengRui/8404edd3bf94784f881f83173b038463"&gt;updateMatplotlibPlot.py&lt;/a&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Zheng Rui</dc:creator><pubDate>Wed, 25 May 2016 00:00:00 +0800</pubDate><guid isPermaLink="false">tag:,2016-05-25:update-matplotlib-plot.html</guid><category>Tips</category><category>Python</category></item><item><title>Debug Python code using Wingdb</title><link>/wingdb-usage.html</link><description>&lt;p&gt;This tip is about using &lt;a href="https://wingware.com/"&gt;wingide&lt;/a&gt; 's debugger to debug your python code. Sometimes the python code can run from terminal but not from wingide ui, it mostly is because the python related environmental variable settings are different when python kernel is start from terminal and from wingide. In this case, you want to start your programe from terminal so it can run properly and still want to be able to debug your code like setting breakpoints, checking stack data. Wingide provide a &lt;a href="http://wingware.com/psupport/wingide-1.1/node7.html#debugexternal"&gt;simple way&lt;/a&gt; to achieve this. Basically:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Copy wingdbstub.py from the Wing IDE installation directory into the same directory as your debug program.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;At the point where you want debugging to begin, insert following code&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;wingdbstub&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;WINGDB_ACTIVE&amp;#39;&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;environ&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Success starting debug&amp;quot;&lt;/span&gt;
&lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Failed to start debug... Continuing without debug&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Zheng Rui</dc:creator><pubDate>Wed, 25 May 2016 00:00:00 +0800</pubDate><guid isPermaLink="false">tag:,2016-05-25:wingdb-usage.html</guid><category>Tips</category><category>Python</category></item><item><title>OSX Yosemite as VNC server</title><link>/vnc-osx-yosemite.html</link><description>&lt;p&gt;OS: OSX 10.10 Yosemite&lt;/p&gt;
&lt;h2&gt;enable screen sharing&lt;/h2&gt;
&lt;p&gt;&lt;img width="600" src="images/vncOnMac/vncOnMac-1.png"&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://apple.stackexchange.com/questions/34443/remote-management-vs-screen-sharing"&gt;Remote Management vs. Screen Sharing?&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;connection from client&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;if client is Apple, simple: &lt;code&gt;open vnc://ipaddr&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;if client is Linux or Win, sounds simple: &lt;code&gt;vncviewer vnc://ipaddr&lt;/code&gt;, possible issues:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;no matching security types mac&lt;/code&gt;, solution: make sure a vnc password is given in &lt;code&gt;Computer Settings&lt;/code&gt;, it is the password (not the Mac User Account's password) that will be used when vnc client tries to connect Mac using &lt;code&gt;vncviewer&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Mac drop wireless connection after client enters the correct vnc password and tries to estabilish the connection&lt;/strong&gt;, solution: &lt;code&gt;sudo defaults write /Library/Preferences/com.apple.RemoteManagement VNCAlwaysStartOnConsole -bool true&lt;/code&gt; from &lt;a href="http://apple.stackexchange.com/questions/136802/vnc-connection-to-mavericks-screen-sharing-drops-wifi-connection"&gt;VNC connection to Mavericks Screen Sharing drops WiFi connection&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;ssh tunneling&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;meaning of &lt;code&gt;ssh -L port1:localhost:port2 user@serveraddr&lt;/code&gt; (suppose i issue this command in &lt;code&gt;MachineA&lt;/code&gt;): it is a normal ssh logging, but after logging in serveraddr, all the traffic to &lt;code&gt;port1&lt;/code&gt; in &lt;code&gt;MachineA&lt;/code&gt; will be &lt;code&gt;forwarded&lt;/code&gt; to &lt;code&gt;port2&lt;/code&gt; in &lt;code&gt;serveraddr&lt;/code&gt;, emp. in my ubuntu client&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;ssh -L 5900:localhost:5900 zerry@serveraddr
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;after logging in and stay logged in, open a new terminal&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;vncviewer localhost:5900 &lt;span class="c1"&gt;# or vncviewer localhost&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;then we can vnc view Mac through ssh tunneling. Basically using ssh tunneling is for safety reason as it provides better encription of communication compared to directly using vnc protocol, but in low level they both reply on tcp connection. Can check &lt;code&gt;5900&lt;/code&gt; port number by &lt;code&gt;lsof -i :5900&lt;/code&gt; in &lt;code&gt;MachineA&lt;/code&gt; and see if it is listening&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Mac's beautful ui including all apps is called Aqua, it's very different from XServer in Linux&lt;/strong&gt;, that's why you need to install &lt;code&gt;XQuartz&lt;/code&gt; to setup an XServer in Mac so that it can render XWindows forwarded from Linux servers. However, in Mac server Linux client settings, after ssh logged in, when trying to open Mac native apps like &lt;code&gt;Finder&lt;/code&gt; using &lt;code&gt;open .&lt;/code&gt; command in Linux client, rather than a pop up window in Linux client, the apps will be opened in Mac server, think of Linux client helping Mac server to fire a command, this is because Linux client can't render Aqua native apps. But X11 Windows/Programs like &lt;code&gt;xclock&lt;/code&gt;, &lt;code&gt;firefox&lt;/code&gt; can be forwarded to Linux client properly&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;experiments:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Linux client ssh into Mac, then run &lt;code&gt;open vnc://localhost&lt;/code&gt;: &lt;code&gt;you cannot control your own screen&lt;/code&gt;, this is because &lt;code&gt;5900&lt;/code&gt; is by default already served for the display of Mac itself&lt;/li&gt;
&lt;li&gt;Prepare a ssh tunneling inside Mac server &lt;code&gt;ssh -L 5901:localhost:5900 localhost&lt;/code&gt;, so that vnc to &lt;code&gt;5901&lt;/code&gt; in the server is equal to vnc to server's &lt;code&gt;5900&lt;/code&gt; (can check state of port &lt;code&gt;5901&lt;/code&gt; using &lt;code&gt;lsof&lt;/code&gt; as mentioned above), then Linux client ssh into Mac and run &lt;code&gt;open vnc://localhost:5901&lt;/code&gt;, this will be what happens in the Mac server:&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img width="600" src="images/vncOnMac/vncOnMac-2.png"&gt;&lt;/p&gt;
&lt;h2&gt;remmina version issues&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;remmina in ubuntu 12.04 's password is not the vnc password set in &lt;code&gt;computer settings&lt;/code&gt;, but the account password. And it never makes Mac server drop wireless connection.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;remmina in ubuntu 14.04 's password is the vnc password set in &lt;code&gt;computer settings&lt;/code&gt;, just like run the normal &lt;code&gt;vncviewer&lt;/code&gt; in command line.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://bugs.launchpad.net/ubuntu/+source/remmina/+bug/1171733"&gt;bug of version issues&lt;/a&gt;, even now is not fixed in &lt;code&gt;reminna-test&lt;/code&gt;, &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;It has to do with the fact that when the remmina vnc plugin is built on newer versions of Debian (and/or Ubuntu) the compiler builds against the system package version of libvncserver rather than the customized internal version of libvncserver packaged with the remmina-plugin-vnc source. These days the system package version of libvncserver is the better option, and this is probably intended behavior, but remmina-plugin-vnc looks for certain custom defined flags in its personal version of libvncserver in order to enable Apple Authentication support. It doesnt see these flags, so this feature doesnt work.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;check versions: &lt;code&gt;apt-cache policy remmina&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Zheng Rui</dc:creator><pubDate>Thu, 18 Feb 2016 00:00:00 +0800</pubDate><guid isPermaLink="false">tag:,2016-02-18:vnc-osx-yosemite.html</guid><category>Linux</category></item><item><title>Log of Setting Up Deep Learning Environment in Ubuntu14.04</title><link>/log-dl-ubuntu14.04.html</link><description>&lt;h2&gt;[Hardware] Beginner's Configurations&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;EVGA Nvidia Graphics Card variation explaination&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;ACX 2.0+: advanced air cooling system&lt;/li&gt;
&lt;li&gt;SC: slightly super clocked&lt;/li&gt;
&lt;li&gt;Classified/FTW: highest super clocked&lt;/li&gt;
&lt;li&gt;Hybrid: water loop cooling system&lt;/li&gt;
&lt;li&gt;BP: pure esthetic considerations, black plate&lt;/li&gt;
&lt;li&gt;K|NGP|N: pre-binned gpu&lt;/li&gt;
&lt;li&gt;ideal options: GTX980Ti ACX 2.0+; GTX980Ti SC ACX 2.0+ (w/BP); GTX 980Ti Classified ACX 2.0+; GTX980Ti Hybrid&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;CPU: 40 PCIe lanes, each graphics card will consume 8 PCIe lanes, i7 5820K has 28, which can support 2 GTX980Ti SLI crossfire; in Q3/Q4 of 2016, new graphics card with Pascal architechture will be release, can buy more GTX980Ti cards and upgrade cpu to i7 5930 or above which has 40 lanes&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Motherboard: PCIe 3.0 support, 5 or more slots to support multiple GPUs, usually 1 GPU takes two slots&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Memory: twice size of GRAM (GTX980Ti has 6GB GRAM)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;PSU: i7 5820K is 150W, GTX980Ti is 250W, whole system with 2 cards consumes 750-800W, 1000W will be enough for 2 cards. G2 style is better than G1 style&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Ref&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://timdettmers.com/2015/03/09/deep-learning-hardware-guide/"&gt;A full hardware guide for deep learning&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://timdettmers.com/2014/08/14/which-gpu-for-deep-learning/"&gt;Which gpu(s) to get for deep learning&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Order&lt;/h2&gt;
&lt;p&gt;Amazon: service really bad, slow and came as broken packaging plus i had to pick up by myself&lt;/p&gt;
&lt;p&gt;&lt;img width="600" src="images/dlhardware/dlhard1.png"&gt;&lt;/p&gt;
&lt;p&gt;B&amp;amp;H Photo: very good, DHL sent it to my lab (US2HK) the third day after the order with perfect packaging&lt;/p&gt;
&lt;p&gt;&lt;img width="600" src="images/dlhardware/dlhard2.png"&gt;&lt;/p&gt;
&lt;p&gt;Ref: &lt;a href="http://cs.stanford.edu/people/karpathy/"&gt;Andrej Karpathy&lt;/a&gt;'s &lt;a href="https://pcpartpicker.com/user/badmephisto/saved/#view=mM3J7P"&gt;List&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;Realtek 802.11 wireless adaptor driver&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;for new kernels (maybe &amp;gt; 3.13), &lt;strong&gt;do not&lt;/strong&gt; use this repo &lt;code&gt;abperiasamy/rtl8812AU_8821AU_linux&lt;/code&gt;, instead &lt;strong&gt;use this one&lt;/strong&gt; &lt;code&gt;https://github.com/gnab/rtl8812au&lt;/code&gt;. Before compilation step, need to first install some basic dependency &lt;code&gt;sudo apt-get install build-essential&lt;/code&gt;, don't install &lt;code&gt;linux-generic&lt;/code&gt;, it will upgrade kernel.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;bothering thing: after each reboot, in the login page, wifi ask for password and certificate, this is mostly happened when the network is Protected EAP (PEAP) enterprises type. The way to let it auto login without asking for password in the login page is edit &lt;code&gt;/etc/networkmanager/system-connections/sMobileNet&lt;/code&gt; file, change line &lt;code&gt;password-flags=1&lt;/code&gt; to &lt;code&gt;password=123realpsd321&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;vim configuration&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;by default it contains a useless vim-tiny, remove it by &lt;code&gt;sudo apt-get autoremove vim-tiny&lt;/code&gt;, then install &lt;strong&gt;&lt;code&gt;vim-gnome&lt;/code&gt;&lt;/strong&gt; or &lt;strong&gt;&lt;code&gt;vim-gtk&lt;/code&gt;&lt;/strong&gt;, if run &lt;code&gt;sudo apt-get install vim&lt;/code&gt; will found missing a lot of support, for example clipboard, python. &lt;code&gt;vim-gnome&lt;/code&gt; and &lt;code&gt;vim-gtk&lt;/code&gt; contains almost all the supports&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;after the &lt;code&gt;PluginInstall&lt;/code&gt; of &lt;code&gt;YouCompleteMe&lt;/code&gt;, you need to compile it &lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nb"&gt;cd&lt;/span&gt; ~/.vim/bundle/YouCompleteMe
./install.py --clang-completer
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;install &lt;code&gt;pathogen&lt;/code&gt;: bascially put &lt;code&gt;pathogen.vim&lt;/code&gt; inside &lt;code&gt;.vim/autoload&lt;/code&gt; folder&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;the solarized vim may look horrible untill now, but wait till next step&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;solarize gnome-terminal and vim&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;solarize gnome-terminal:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;click &lt;code&gt;Edit ▸ Preferences ▸ Profiles&lt;/code&gt;, create a new profile named &lt;code&gt;solarized&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;solarize it: remember to select the new profile &lt;code&gt;solarized&lt;/code&gt; we just created&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;bash
git clone https://github.com/Anthony25/gnome-terminal-colors-solarized.git
cd gnome-terminal-colors-solarized
./install.sh&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;now do &lt;code&gt;ls&lt;/code&gt;, you will found colors are gone, find colors back by:&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;git clone https://github.com/seebi/dircolors-solarized.git
cp dircolors-solarized/dircolors.ansi-universe ~/.dircolors
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;actually you will find in &lt;code&gt;.bashrc&lt;/code&gt; file some commands like &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;eval `dircolors /path/to/.dircolors`
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;can change color schemes depending on personal flavor, need to copy related codes from &lt;code&gt;.bashrc&lt;/code&gt; to &lt;code&gt;.zshrc&lt;/code&gt; if using &lt;code&gt;oh-my-zsh&lt;/code&gt;.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;.vimrc&lt;/code&gt;:&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;quot; add for vundle
set nocompatible
filetype off

&amp;quot; set the runtime path to include Vundle and initialize
set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()

Plugin &amp;#39;gmarik/Vundle.vim&amp;#39;
Plugin &amp;#39;Valloric/YouCompleteMe&amp;#39;
Plugin &amp;#39;bling/vim-airline&amp;#39;
Plugin &amp;#39;altercation/vim-colors-solarized&amp;#39;
Plugin &amp;#39;tpope/vim-fugitive&amp;#39;
Plugin &amp;#39;mattn/emmet-vim&amp;#39;
Plugin &amp;#39;sukima/xmledit&amp;#39;
Plugin &amp;#39;scrooloose/nerdtree&amp;#39;
Plugin &amp;#39;majutsushi/tagbar&amp;#39;
Plugin &amp;#39;fatih/vim-go&amp;#39;

call vundle#end()
filetype plugin indent on
set encoding=utf-8

execute pathogen#infect()
set background=dark
set t_Co=16
set colorcolumn=80
set cursorline
let g:solarized_termcolors=16
let g:solarized_termtrans=0
call togglebg#map(&amp;quot;&amp;lt;F5&amp;gt;&amp;quot;)
colorscheme solarized


&amp;quot; trivial settings
syntax on
set backspace=indent,eol,start
set nu hlsearch is expandtab
set ts=4
set sw=4
hi CursorLineNr ctermbg=15 ctermfg=5
imap jk &amp;lt;Esc&amp;gt;


&amp;quot; copy to X11 buffer
set clipboard=unnamed

au BufRead,BufNewFile *.md set filetype=markdown

&amp;quot; after PluginInstall of ycm, you need to compile it, check github page
let g:ycm_global_ycm_extra_conf = &amp;#39;~/.vim/bundle/YouCompleteMe/third_party/ycmd/cpp/ycm/.ycm_extra_conf.py&amp;#39;

&amp;quot; for switching between splits
set splitbelow
set splitright
set wmh=0
nmap &amp;lt;c-j&amp;gt; &amp;lt;c-w&amp;gt;j
nmap &amp;lt;c-k&amp;gt; &amp;lt;c-w&amp;gt;k
nmap &amp;lt;c-h&amp;gt; &amp;lt;c-w&amp;gt;h
nmap &amp;lt;c-l&amp;gt; &amp;lt;c-w&amp;gt;l

&amp;quot; for vim-airline, need to install
&amp;quot; powerline prepatched fonts so that
&amp;quot; arrow display correctly
set laststatus=2
let g:airline_powerline_fonts = 1
let g:airline_theme = &amp;quot;powerlineish&amp;quot;

&amp;quot; disable conceal for tex files
let g:tex_conceal = &amp;quot;&amp;quot;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;ssh and login using key&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;need to install ssh server (by default it is not included)&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo apt-get install openssh-server
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;in client, using &lt;code&gt;ssh-keygen -t rsa&lt;/code&gt;, it's better to &lt;strong&gt;not change keyfile name&lt;/strong&gt;, also &lt;strong&gt;no need to enter passphrase&lt;/strong&gt;, just keep hitting enter, then copy &lt;code&gt;id_rsa.pub&lt;/code&gt; content to server's &lt;code&gt;.ssh/authorized_keys&lt;/code&gt; file. By default it use &lt;code&gt;id_rsa&lt;/code&gt; file to do the matching, that's why better to not change keyfile name. Otherwise, have to specify which private key file (IdentityFile) to use for each Host/User.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;vnc&lt;/h2&gt;
&lt;p&gt;This is a bit different than my last &lt;a href="/vnc-centos.html"&gt;post&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;server: &lt;code&gt;sudo apt-get install tightvncserver&lt;/code&gt;, then will have &lt;code&gt;vncserver&lt;/code&gt; command, try play with &lt;code&gt;vncserver&lt;/code&gt;, &lt;code&gt;vncserver -kill :1&lt;/code&gt; and check &lt;code&gt;~/.vnc/&lt;/code&gt; folder&lt;/li&gt;
&lt;li&gt;gnome desktop environment: &lt;code&gt;sudo apt-get install gnome-panel gnome-settings-daemon metacity nautilus gnome-terminal&lt;/code&gt;, &lt;code&gt;xfce&lt;/code&gt; desktop is ugly and not recommended&lt;/li&gt;
&lt;li&gt;configuration: edit/create &lt;code&gt;/etc/init.d/vncserver&lt;/code&gt; to be:&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="ch"&gt;#!/bin/bash&lt;/span&gt;
&lt;span class="nv"&gt;PATH&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="nv"&gt;$PATH&lt;/span&gt;&lt;span class="s2"&gt;:/usr/bin/&amp;quot;&lt;/span&gt;
&lt;span class="nb"&gt;export&lt;/span&gt; &lt;span class="nv"&gt;USER&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;myname&amp;quot;&lt;/span&gt;
&lt;span class="nv"&gt;DISPLAY&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;1&amp;quot;&lt;/span&gt;
&lt;span class="nv"&gt;DEPTH&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;16&amp;quot;&lt;/span&gt;
&lt;span class="nv"&gt;GEOMETRY&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;1024x768&amp;quot;&lt;/span&gt;
&lt;span class="nv"&gt;OPTIONS&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;-depth &lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;DEPTH&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; -geometry &lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;GEOMETRY&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; :&lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;DISPLAY&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; -localhost&amp;quot;&lt;/span&gt; &lt;span class="c1"&gt;# for ssh tunneling&lt;/span&gt;
. /lib/lsb/init-functions

&lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="nv"&gt;$1&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt; in
start&lt;span class="o"&gt;)&lt;/span&gt;
log_action_begin_msg &lt;span class="s2"&gt;&amp;quot;Starting vncserver for user &amp;#39;&lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;USER&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;&amp;#39; on localhost:&lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;DISPLAY&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;
su &lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;USER&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; -c &lt;span class="s2"&gt;&amp;quot;/usr/bin/vncserver &lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;OPTIONS&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;
&lt;span class="p"&gt;;;&lt;/span&gt;

stop&lt;span class="o"&gt;)&lt;/span&gt;
log_action_begin_msg &lt;span class="s2"&gt;&amp;quot;Stoping vncserver for user &amp;#39;&lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;USER&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;&amp;#39; on localhost:&lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;DISPLAY&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;
su &lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;USER&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; -c &lt;span class="s2"&gt;&amp;quot;/usr/bin/vncserver -kill :&lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;DISPLAY&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;
&lt;span class="p"&gt;;;&lt;/span&gt;

restart&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="nv"&gt;$0&lt;/span&gt; stop
&lt;span class="nv"&gt;$0&lt;/span&gt; start
&lt;span class="p"&gt;;;&lt;/span&gt;
&lt;span class="k"&gt;esac&lt;/span&gt;
&lt;span class="nb"&gt;exit&lt;/span&gt; 0
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;next:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo chmod +x /etc/init.d/vncserver
sudo service vncserver start
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;client: &lt;code&gt;sudo apt-get install xvnc4viewer&lt;/code&gt;, then will have &lt;code&gt;vncviewer&lt;/code&gt; command, try &lt;code&gt;vncviewer localhost:1&lt;/code&gt; when using ssh tunneling&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;actually system already has a nice tool &lt;code&gt;vino&lt;/code&gt;, check video &lt;a href="https://www.youtube.com/watch?v=gemAacoe78U"&gt;VNC Ubuntu 14.04 Remote Desktop Setup&lt;/a&gt;, try tick/untick &lt;code&gt;require-encryption&lt;/code&gt; in &lt;code&gt;dconf&lt;/code&gt; if the client has problem connecting to server.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;matlab&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;crack:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;installation key: &lt;code&gt;09806-07443-53955-64350-21751-41297&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;copy &lt;code&gt;libmwservices.so&lt;/code&gt; to &lt;code&gt;$MATLABPATH/bin/glnx64&lt;/code&gt; folder&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;add shortcut:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;download a matlab icon from google image&lt;/li&gt;
&lt;li&gt;create &lt;code&gt;/usr/share/applications/matlab.desktop&lt;/code&gt; file, content:&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;plain
[Desktop Entry]
Type=Application
Name=Matlab
GenericName=Matlab 2015b
Comment=Matlab:The Language of Technical Computing
Exec=/usr/local/MATLAB/R2015b/bin/matlab -desktop
Icon=/usr/local/MATLAB/Matlab.png
Terminal=false
Categories=Development;Matlab;&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;opencv with cuda&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="http://blog.aicry.com/ubuntu-14-04-install-opencv-with-cuda/"&gt;ref1&lt;/a&gt;, &lt;a href="http://blog.csdn.net/altenli/article/details/44199539"&gt;ref2&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;cuda/cudnn: &lt;a href="https://github.com/facebook/fbcunn/blob/master/INSTALL.md"&gt;FAIR fucnn install guide&lt;/a&gt;, no need to install &lt;code&gt;build-essential&lt;/code&gt; and especially &lt;code&gt;linux-generic&lt;/code&gt;, already installed in above. &lt;code&gt;cuda7.5&lt;/code&gt; contains nvidia driver &lt;code&gt;352&lt;/code&gt;, even i installed &lt;code&gt;358&lt;/code&gt; before this, after installation of &lt;code&gt;cuda7.5&lt;/code&gt;, the driver version downgrades to &lt;code&gt;352&lt;/code&gt;, but &lt;code&gt;nvidia-settings&lt;/code&gt; remains &lt;code&gt;358&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;cuda samples:&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nb"&gt;cd&lt;/span&gt; /usr/local/cuda/samples
sudo make all -j8
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;code&gt;./deviceQuery&lt;/code&gt; will give information about my GTX980Ti.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;install dependencies:&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo apt-get install libopencv-dev build-essential checkinstall cmake pkg-config yasm libtiff4-dev libjpeg-dev libjasper-dev libavcodec-dev libavformat-dev libswscale-dev libdc1394-22-dev libxine-dev libgstreamer0.10-dev libgstreamer-plugins-base0.10-dev libv4l-dev python-dev python-numpy libtbb-dev libqt4-dev libgtk2.0-dev libfaac-dev libmp3lame-dev libopencore-amrnb-dev libopencore-amrwb-dev libtheora-dev libvorbis-dev libxvidcore-dev x264 v4l-utils
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;I already installed &lt;code&gt;numpy&lt;/code&gt; through &lt;code&gt;pip&lt;/code&gt; (slow but with up-to-date version), so no &lt;code&gt;python-numpy&lt;/code&gt; here for me. &lt;/p&gt;
&lt;p&gt;Install &lt;code&gt;ffmpeg&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo add-apt-repository ppa:mc3man/trusty-media
sudo apt-get update
sudo apt-get install ffmpeg
sudo apt-get install frei0r-plugins
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;install opencv with cuda support after downloading and extraction of opencv-2.4.11:&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nb"&gt;cd&lt;/span&gt; opencv  
mkdir release  
&lt;span class="nb"&gt;cd&lt;/span&gt; release  
cmake -D &lt;span class="nv"&gt;CMAKE_BUILD_TYPE&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;RELEASE -D &lt;span class="nv"&gt;CMAKE_INSTALL_PREFIX&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;/usr/local -D &lt;span class="nv"&gt;WITH_TBB&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;ON -D &lt;span class="nv"&gt;BUILD_NEW_PYTHON_SUPPORT&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;ON -D &lt;span class="nv"&gt;WITH_V4L&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;ON -D &lt;span class="nv"&gt;INSTALL_C_EXAMPLES&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;ON -D &lt;span class="nv"&gt;INSTALL_PYTHON_EXAMPLES&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;ON -D &lt;span class="nv"&gt;BUILD_EXAMPLES&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;ON -D &lt;span class="nv"&gt;WITH_QT&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;ON -D &lt;span class="nv"&gt;WITH_OPENGL&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;ON -D &lt;span class="nv"&gt;ENABLE_FAST_MATH&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt; -D &lt;span class="nv"&gt;WITH_CUDA&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;ON -D &lt;span class="nv"&gt;CUDA_ARCH_BIN&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;5.2&amp;quot;&lt;/span&gt; -D &lt;span class="nv"&gt;CUDA_FAST_MATH&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt; -D &lt;span class="nv"&gt;WITH_CUBLAS&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;1
make -j6
sudo make install
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;by now &lt;code&gt;pkg-config --cflags --libs opencv&lt;/code&gt; should show correct paths&lt;/p&gt;
&lt;h2&gt;torch7&lt;/h2&gt;
&lt;p&gt;install torch7 first, it's easy to install and after installation, OpenBLAS will also be installed inside &lt;code&gt;/opt/&lt;/code&gt;&lt;/p&gt;
&lt;h2&gt;caffe&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;install dependencies:&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo apt-get install libprotobuf-dev libleveldb-dev libsnappy-dev libopencv-dev libhdf5-serial-dev protobuf-compiler
sudo apt-get install --no-install-recommends libboost-all-dev
sudo apt-get install libgflags-dev libgoogle-glog-dev liblmdb-dev
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;install python dependencies: &lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nb"&gt;cd&lt;/span&gt; python
&lt;span class="k"&gt;for&lt;/span&gt; req in &lt;span class="k"&gt;$(&lt;/span&gt;cat requirements.txt&lt;span class="k"&gt;)&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; pip install &lt;span class="nv"&gt;$req&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;done&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;install caffe: &lt;code&gt;cp Makefile.config.example Makefile.config&lt;/code&gt;, edit &lt;code&gt;Makefile.config&lt;/code&gt; to be:&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nv"&gt;USE_CUDNN&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; 1
&lt;span class="nv"&gt;CUDA_DIR&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; /usr/local/cuda
&lt;span class="nv"&gt;CUDA_ARCH&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; -gencode &lt;span class="nv"&gt;arch&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;compute_20,code&lt;span class="o"&gt;=&lt;/span&gt;sm_20 &lt;span class="se"&gt;\&lt;/span&gt;
        -gencode &lt;span class="nv"&gt;arch&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;compute_20,code&lt;span class="o"&gt;=&lt;/span&gt;sm_21 &lt;span class="se"&gt;\&lt;/span&gt;
        -gencode &lt;span class="nv"&gt;arch&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;compute_30,code&lt;span class="o"&gt;=&lt;/span&gt;sm_30 &lt;span class="se"&gt;\&lt;/span&gt;
        -gencode &lt;span class="nv"&gt;arch&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;compute_35,code&lt;span class="o"&gt;=&lt;/span&gt;sm_35 &lt;span class="se"&gt;\&lt;/span&gt;
        -gencode &lt;span class="nv"&gt;arch&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;compute_50,code&lt;span class="o"&gt;=&lt;/span&gt;sm_50 &lt;span class="se"&gt;\&lt;/span&gt;
        -gencode &lt;span class="nv"&gt;arch&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;compute_50,code&lt;span class="o"&gt;=&lt;/span&gt;compute_50

&lt;span class="nv"&gt;BLAS&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; open
&lt;span class="nv"&gt;BLAS_INCLUDE&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; /opt/OpenBLAS/include
&lt;span class="nv"&gt;BLAS_LIB&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; /opt/OpenBLAS/lib

&lt;span class="nv"&gt;MATLAB_DIR&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; /usr/local/MATLAB/R2015b
&lt;span class="nv"&gt;PYTHON_INCLUDE&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; /usr/include/python2.7 &lt;span class="se"&gt;\&lt;/span&gt;
        /usr/local/lib/python2.7/dist-packages/numpy/core/include &lt;span class="c1"&gt;## numpy is installed through pip, which makes it here rather than /usr/lib/python2.7...&lt;/span&gt;
&lt;span class="nv"&gt;PYTHON_LIB&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; /usr/lib/x86_64-linux-gnu  &lt;span class="c1"&gt;## libpython*.so.* is here&lt;/span&gt;

&lt;span class="nv"&gt;INCLUDE_DIRS&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="k"&gt;$(&lt;/span&gt;PYTHON_INCLUDE&lt;span class="k"&gt;)&lt;/span&gt; /usr/local/include
&lt;span class="nv"&gt;LIBRARY_DIRS&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="k"&gt;$(&lt;/span&gt;PYTHON_LIB&lt;span class="k"&gt;)&lt;/span&gt; /usr/local/lib /usr/lib

&lt;span class="nv"&gt;BUILD_DIR&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; build
&lt;span class="nv"&gt;DISTRIBUTE_DIR&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; distribute

&lt;span class="nv"&gt;TEST_GPUID&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; 0

&lt;span class="c"&gt;# enable pretty build (comment to see full commands)&lt;/span&gt;
&lt;span class="nv"&gt;Q&lt;/span&gt; &lt;span class="o"&gt;?=&lt;/span&gt; @
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;finally build:&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;make all -j6
make &lt;span class="nb"&gt;test&lt;/span&gt;
make runtest
make pycaffe
make matcaffe
make mattest
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;some ppl complained default gcc/g++ version in Ubuntu14.04 is gcc-4.8/g++-4.8 and matlab's mex may not support, which for me is not a problem, &lt;code&gt;make mattest&lt;/code&gt; passes all the test without modifying anything like downgrading gcc/g++ to 4.7 or changing &lt;code&gt;mexopt.sh&lt;/code&gt; file.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Zheng Rui</dc:creator><pubDate>Fri, 15 Jan 2016 00:00:00 +0800</pubDate><guid isPermaLink="false">tag:,2016-01-15:log-dl-ubuntu14.04.html</guid><category>Deep Learning</category><category>Linux</category></item><item><title>Set Up VNC on CentOS</title><link>/vnc-centos.html</link><description>&lt;h4&gt;install tigervnc&lt;/h4&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;yum groupinstall Desktop
yum install tigervnc-server
&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt;modify /etc/sysconfig/vncservers file&lt;/h4&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;VNCSERVERS&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;1:user1 2:user2&amp;quot;&lt;/span&gt;
VNCSERVERARGS[&lt;span class="m"&gt;1&lt;/span&gt;]&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;-geometry 1024x768 -localhost&amp;quot;&lt;/span&gt;
VNCSERVERARGS[&lt;span class="m"&gt;2&lt;/span&gt;]&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;-geometry 1920x1080 -localhost&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;code&gt;-localhost&lt;/code&gt; option is to make vnc encrypted through an ssh tunnel&lt;/p&gt;
&lt;h4&gt;modify /etc/sysconfig/iptables file&lt;/h4&gt;
&lt;p&gt;add one line:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;-&lt;/span&gt;A INPUT &lt;span class="p"&gt;-&lt;/span&gt;&lt;span class="k"&gt;m&lt;/span&gt; state &lt;span class="p"&gt;--&lt;/span&gt;state NEW &lt;span class="p"&gt;-&lt;/span&gt;&lt;span class="k"&gt;m&lt;/span&gt; tcp &lt;span class="p"&gt;-&lt;/span&gt;&lt;span class="k"&gt;p&lt;/span&gt; tcp &lt;span class="p"&gt;-&lt;/span&gt;&lt;span class="k"&gt;m&lt;/span&gt; multiport &lt;span class="p"&gt;--&lt;/span&gt;dports &lt;span class="m"&gt;5901&lt;/span&gt;:&lt;span class="m"&gt;5903&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="m"&gt;6001&lt;/span&gt;:&lt;span class="m"&gt;6003&lt;/span&gt; &lt;span class="p"&gt;-&lt;/span&gt;&lt;span class="k"&gt;j&lt;/span&gt; ACCEPT
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;restart iptables:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;service iptables restart
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;output:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;iptables: Setting chains to policy ACCEPT: filter          &lt;span class="o"&gt;[&lt;/span&gt;  OK  &lt;span class="o"&gt;]&lt;/span&gt;
iptables: Flushing firewall rules:                         &lt;span class="o"&gt;[&lt;/span&gt;  OK  &lt;span class="o"&gt;]&lt;/span&gt;
iptables: Unloading modules:                               &lt;span class="o"&gt;[&lt;/span&gt;  OK  &lt;span class="o"&gt;]&lt;/span&gt;
iptables: Applying firewall rules:                         &lt;span class="o"&gt;[&lt;/span&gt;  OK  &lt;span class="o"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt;set vnc passwd for each user&lt;/h4&gt;
&lt;p&gt;after ssh into my account&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;vncpasswd
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;i can set the password corresponding to my account&lt;/p&gt;
&lt;h4&gt;start vnc server&lt;/h4&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;service vncserver start
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;output:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Starting VNC server: 1:user1
New &lt;span class="s1"&gt;&amp;#39;Lab:1 (user1)&amp;#39;&lt;/span&gt; desktop is Lab:1

Starting applications specified in /home/user1/.vnc/xstartup
Log file is /home/user1/.vnc/Lab:1.log

2:user2 
New &lt;span class="s1"&gt;&amp;#39;Lab:2 (user2)&amp;#39;&lt;/span&gt; desktop is Lab:2

Starting applications specified in /home/user2/.vnc/xstartup
Log file is /home/user2/.vnc/Lab:2.log

                                                           &lt;span class="o"&gt;[&lt;/span&gt;  OK  &lt;span class="o"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;try &lt;code&gt;restart&lt;/code&gt; or &lt;code&gt;stop&lt;/code&gt; also to make it work&lt;/p&gt;
&lt;p&gt;if met problems like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Starting VNC server: 1:user1 A VNC server is already running as :1
                                                           &lt;span class="o"&gt;[&lt;/span&gt;FAILED&lt;span class="o"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;it means there are already some process occupy the port &lt;code&gt;6001&lt;/code&gt;, using &lt;code&gt;ps ef | grep vnc&lt;/code&gt; does not give me anything, because this port is actually occupied by &lt;code&gt;Xvfb&lt;/code&gt;, using &lt;code&gt;lsof -i tcp:6001&lt;/code&gt; will give the &lt;code&gt;pid&lt;/code&gt; of the process which occupy the port, after killing that process, vnc server will be able to start normally.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;user1@Lab .vnc&lt;span class="o"&gt;]&lt;/span&gt;$ ls
passwd  Lab:1.log  Lab:1.pid  xstartup
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;user2@Lab .vnc&lt;span class="o"&gt;]&lt;/span&gt;$ ls
passwd  Lab:2.log  Lab:2.pid  xstartup
&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt;usage&lt;/h4&gt;
&lt;p&gt;after &lt;code&gt;ssh&lt;/code&gt; into the server, run &lt;code&gt;vncviewer localhost:1&lt;/code&gt; using corresponding vnc password will show the desktop, can also try &lt;code&gt;vncviewer localhost:2&lt;/code&gt; using vnc password set by others.&lt;/p&gt;
&lt;p&gt;Try openning a firefox, close vncviewer, then connect again, firefox is still there.&lt;/p&gt;
&lt;h4&gt;reference&lt;/h4&gt;
&lt;p&gt;&lt;a href="https://rbgeek.wordpress.com/2012/06/26/how-to-install-vnc-server-on-centos-6/"&gt;1. How to install VNC server on CentOS 6&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://wiki.centos.org/HowTos/VNC-Server"&gt;2. VNC CentOS Wiki&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="http://monsterjam.org/blog/20071228103211"&gt;3. A VNC server is already running as :10&lt;/a&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Zheng Rui</dc:creator><pubDate>Wed, 14 Oct 2015 00:00:00 +0800</pubDate><guid isPermaLink="false">tag:,2015-10-14:vnc-centos.html</guid><category>Linux</category></item><item><title>Collection of Bloody Lessons</title><link>/bloody-lessons.html</link><description>&lt;h2&gt;This will be the logs of my struggling in fixing all kinds of messy bugs&lt;/h2&gt;
&lt;h4&gt;01/03/2015: converting ipython notebook into html, style is ugly, math symbols and tabels in markdown cell are not rendered, no title of the html page&lt;/h4&gt;
&lt;p&gt;Reason: &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;I was using ipython 1.2.1, css style is ugly itself, if using ipython 2.1.0, style will be much better, but then liquid-tags plugin in pelican will not work properly.&lt;/li&gt;
&lt;li&gt;In "dist-packages/IPython/nbconvert/templates" folder, there are templates for how to convert notebook to html, in "html_full.tpl" file, change mathjax domain address to "cdn.mathjax.org", check &lt;a href="https://github.com/ipython/ipython/issues/6440"&gt;nbconvert: Math is not displayed in the html output&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Ipython nbconvert uses pandoc for converting to other formats, i was using pandoc 1.9 by default installation with "sudo apt-get install pandoc", it requires a new version of pandoc so that tables in markdown cell can be rendered, chech &lt;a href="https://github.com/ipython/nbconvert/issues/37"&gt;HTML tables aren't converted to latex&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;** text here  ** can be shown correctly in notebook, but still shown as ** text here ** instead of  &lt;strong&gt;text here&lt;/strong&gt; in the exported html file.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Solution: &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Fix mathjax domain both in ipython folder (for ipython1 series, is inside "html_full.tpl", for ipython2 series, is inside "mathjax.tpl") and in liquid-tags plugin folder (inside "notebook.py") so math symbols can be rendered&lt;/li&gt;
&lt;li&gt;Remove pandoc 1.9, install pandoc 1.13 using .deb file, then tables in markdown cell can be rendered.&lt;/li&gt;
&lt;li&gt;In "html_full.tpl" file, change title to "{{resources['metadata']['name']}}" so html page title can be extracted correctly.&lt;/li&gt;
&lt;li&gt;Delete space between ** and to be emphasized text.&lt;/li&gt;
&lt;li&gt;Stay with ipython1, since css changed a lot in ipython2 and liquid_tags only works with ipython1, other wise there will be no code highlighting in notebook cells after rendered, check discssions in &lt;a href="https://jakevdp.github.io/blog/2013/05/07/migrating-from-octopress-to-pelican/"&gt;migrating from octopress to pelican&lt;/a&gt;, also liquid-tags requires python markdown 2.3 instead of 2.5 as i mentioned there.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Result:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;For nbconverted html file: has page title, math symbols rendered, tabel in markdown cells rendered, emphasized text is emphasized. However, rendered html file is not that beautiful though every part now can be rendered.&lt;/li&gt;
&lt;li&gt;For pelican: only bokeh figures have some bounding boxes that makes it not that cool comparing to the perfectly rendered html file by ipython2.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;01/22/2016: unable to load disqus in pelican&lt;/h4&gt;
&lt;p&gt;For a whole year, I got messed up with disqus comment of my blog and too busy or lazy to fix it, today finally determined to fix it. Finally it has nothing to do with &lt;code&gt;SITEURL&lt;/code&gt; empty or not empty, &lt;code&gt;RELATIVE_URLS&lt;/code&gt; True or False as most posts said. I found the fix from &lt;a href="https://github.com/DandyDev/pelican-bootstrap3/issues/219"&gt;here&lt;/a&gt;. Currently my &lt;code&gt;SITEURL&lt;/code&gt; is empty and &lt;code&gt;RELATIVE_URLS&lt;/code&gt; is True.&lt;/p&gt;
&lt;p&gt;Fix:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;add &lt;code&gt;DISQUSURL = 'http://blog.yourdomain.com'&lt;/code&gt; inside &lt;code&gt;pelicanconf.py&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;my theme is &lt;code&gt;pelican-octopress-theme&lt;/code&gt;, so change file &lt;code&gt;pelican-octopress-theme/templates/_includes/disqus_script.html&lt;/code&gt;:&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;          &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;disqus_url&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;{{ DISQUSURL }}/{{ article.url }}&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;now disqus comment will be shown properly and if you check the source code of the page and search &lt;code&gt;disqus_url&lt;/code&gt;, it will not show an relative path like &lt;code&gt;./your-post-title.html&lt;/code&gt; anymore&lt;/p&gt;
&lt;h4&gt;01/22/2016: incompatibility between liquid-tags and python markdown 2.5 above&lt;/h4&gt;
&lt;p&gt;Fix:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/getpelican/pelican-plugins/issues/331"&gt;issue 1&lt;/a&gt;, &lt;a href="https://github.com/getpelican/pelican-plugins/issues/312"&gt;issue 2&lt;/a&gt;, &lt;a href="https://github.com/getpelican/pelican-plugins/pull/321"&gt;fix&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;delete &lt;code&gt;cache&lt;/code&gt; folder and generate the html files again&lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Zheng Rui</dc:creator><pubDate>Sun, 01 Mar 2015 00:00:00 +0800</pubDate><guid isPermaLink="false">tag:,2015-03-01:bloody-lessons.html</guid><category>Funny</category></item><item><title>Machine Learning and Computer Vision Resources</title><link>/ML-CV-Resource.html</link><description>&lt;h2&gt;Machine Learning&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;EBooks&lt;ul&gt;
&lt;li&gt;&lt;a href="https://drive.google.com/open?id=0B3aawkjLrbgMWmNkN09xdkRodG8&amp;amp;authuser=0"&gt;My Colletion&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://en.bookfi.org/"&gt;bookfi&lt;/a&gt; for free ebooks&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Tutorials &amp;amp;&amp;amp; Courses&lt;ul&gt;
&lt;li&gt;General Machine Learning&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/playlist?list=PLD0F06AA0D2E8FFBA"&gt;Machine Learning&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Coursera by &lt;a href="https://www.coursera.org/course/ml"&gt;Andrew Ng&lt;/a&gt;, by Hsuan-Tian Lin &lt;a href="https://www.coursera.org/course/ntumlone"&gt;fundation&lt;/a&gt; and &lt;a href="https://www.coursera.org/course/ntumltwo"&gt;techniques&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Machine Learning @ CMU by Alex Smola &lt;a href="https://www.youtube.com/playlist?list=PLZSO_6-bSqHQmMKwWVvYwKreGu4b4kMU9"&gt;2013&lt;/a&gt; &lt;a href="https://www.youtube.com/playlist?list=PLZSO_6-bSqHTTV7w9u7grTXBHMH-mw3qn"&gt;2015&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.csc.kth.se/utbildning/kth/kurser/DD3364/Schedule.php"&gt;Elements of Statistical Learning @ KTH&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.cse.ust.hk/~dyyeung/hkust_only/comp621i/"&gt;Advanced Topics in ML 2004&lt;/a&gt;, &lt;a href="http://www.cse.ust.hk/~dyyeung/hkust_only/comp621l/"&gt;Kernel and Embedding Methods in ML 2005&lt;/a&gt;, &lt;a href="http://www.cse.ust.hk/~dyyeung/hkust_only/comp621p/"&gt;Beyond Introductory ML 2008&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Machine Learning Summer School: &lt;a href="https://www.youtube.com/playlist?list=PL420ECE3D4B62F082"&gt;2012&lt;/a&gt;, &lt;a href="https://www.youtube.com/playlist?list=PLqJm7Rc5-EXFv6RXaPZzzlzo93Hl0v91E"&gt;2013&lt;/a&gt;, &lt;a href="https://www.youtube.com/playlist?list=PLZSO_6-bSqHQCIYxE3ycGLXHMjK3XV7Iz"&gt;2014&lt;/a&gt;, &lt;a href="http://mlss.cc/index.html"&gt;more&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;龙星计划(Dragon Star Plan) &lt;a href="http://pan.baidu.com/s/1kT0vvWb#dir/path=%2F2010%E9%BE%99%E6%98%9F%E8%AE%A1%E5%88%92%E8%A7%86%E9%A2%91&amp;amp;render-type=grid-view"&gt;2010&lt;/a&gt; &lt;a href="http://pan.baidu.com/share/link?shareid=27613&amp;amp;uk=1513052211#dir/path=%2F%E9%BE%99%E6%98%9F%E8%AE%A1%E5%88%92_%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0_%E8%AF%BE%E7%A8%8B%E8%A7%86%E9%A2%91&amp;amp;render-type=grid-view"&gt;2012&lt;/a&gt; &lt;a href="http://pan.baidu.com/share/link?shareid=27613&amp;amp;uk=1513052211#dir/path=%2F%E9%BE%99%E6%98%9F%E8%AE%A1%E5%88%92_%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0_%E8%AF%BE%E7%A8%8B%E8%A7%86%E9%A2%91&amp;amp;render-type=grid-view"&gt;2013&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/playlist?list=PLQVvvaa0QuDd0flgGphKCej-9jp-QdzZ3"&gt;Scikit-Learn and Python Tutorial&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Data Mining&lt;ul&gt;
&lt;li&gt;&lt;a href="http://statweb.stanford.edu/~jtaylo/courses/stats202/index.html"&gt;STATS202 Data Mining @ Stanford&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://work.caltech.edu/lectures.html"&gt;Learning From Data&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://cilvr.cs.nyu.edu/doku.php?id=courses:bigdata:slides:start"&gt;Big data CILVR Lab @ NYU&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Statistical Machine Learning&lt;ul&gt;
&lt;li&gt;&lt;a href="https://class.stanford.edu/courses/HumanitiesandScience/StatLearning/Winter2015/info"&gt;StatLearning 2015&lt;/a&gt; by Trevor Hastie and Robert Tibshirani&lt;/li&gt;
&lt;li&gt;Statistical Learning @ UCSD &lt;a href="http://www.svcl.ucsd.edu/courses/ece271A/ece271A.htm"&gt;I&lt;/a&gt; &lt;a href="http://www.svcl.ucsd.edu/courses/ece271B-F09/"&gt;II&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Large Scale Machine Learning&lt;ul&gt;
&lt;li&gt;&lt;a href="http://alex.smola.org/teaching/berkeley2012/index.html"&gt;Scalable Machine Learning 2012 @ Berkeley&lt;/a&gt; by Alex Smola &lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.cs.toronto.edu/~rsalakhu/STA4273_2015/"&gt;LSML 2015 @ UToronto&lt;/a&gt; by Russ Salakhutdinov&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Deep Learning&lt;ul&gt;
&lt;li&gt;&lt;a href="http://metaoptimize.com/qa/questions/13774/courses-on-deep-learning"&gt;A Good Collection&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/playlist?list=PL6Xpj9I5qXYEcOhn7TqghAJ6NAPrNmUBH"&gt;Neural networks (NN) by Hugo Larochelle&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.youku.com/playlist_show/id_21508721.html"&gt;深度学习 by 吴立德&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://cl.naist.jp/~kevinduh/a/deep2014/"&gt;DL and NN 2014 @ Nara Institute of Science and Technology&lt;/a&gt;, &lt;a href="http://www.iro.umontreal.ca/~bengioy/cifar/NCAP2014-summerschool/"&gt;CIFAR NCAP (Neural Computation &amp;amp; Adaptive Perception) 2014 @ UToronto&lt;/a&gt;, &lt;a href="http://www.ipam.ucla.edu/programs/summer-schools/graduate-summer-school-deep-learning-feature-learning/?tab=schedule"&gt;Deep learning Feature learning 2014 @ IPAM UCLA&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://memkite.com/deep-learning-bibliography/"&gt;DL university&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Lots of tutorials and workshops in NIPS/ICML/ICML/CVPR/AAAI/I(E)CCV ...&lt;/li&gt;
&lt;li&gt;Deep learning packages: &lt;a href="http://caffe.berkeleyvision.org/"&gt;caffe&lt;/a&gt;, &lt;a href="http://deeplearning.net/software/theano/"&gt;theano&lt;/a&gt;, &lt;a href="https://code.google.com/p/cuda-convnet2/"&gt;cuda-convnet2&lt;/a&gt;, &lt;a href="https://github.com/antinucleon/cxxnet"&gt;cxxnet&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Reviews / PhD Theses: to be added&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;Others&lt;ul&gt;
&lt;li&gt;&lt;a href="http://arxiv.org/list/stat.ML/recent"&gt;ArXiv Machine Learning&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://soundcloud.com/talkingmachines"&gt;Talking Machines @ SoundCloud&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.chioka.in/kaggle-competition-solutions/"&gt;Kaggle competition past solutions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;AMA (ask me anythong) on Reddit by &lt;a href="http://www.reddit.com/r/MachineLearning/comments/2fxi6v/ama_michael_i_jordan"&gt;Jordan&lt;/a&gt;, &lt;a href="http://www.reddit.com/r/MachineLearning/comments/2lmo0l/ama_geoffrey_hinton"&gt;Hinton&lt;/a&gt;, &lt;a href="http://www.reddit.com/r/MachineLearning/comments/25lnbt/ama_yann_lecun"&gt;Lecun&lt;/a&gt;, &lt;a href="http://www.reddit.com/r/MachineLearning/comments/1ysry1/ama_yoshua_bengio"&gt;Bengio&lt;/a&gt;, &lt;a href="http://www.reddit.com/r/MachineLearning/"&gt;ML on Reddit&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Researchers and Blogs: &lt;a href="http://cs.stanford.edu/people/karpathy/"&gt;Andrej Karpathy&lt;/a&gt;, &lt;a href="http://fastml.com/"&gt;FastML&lt;/a&gt;, &lt;a href="http://neuralnetworksanddeeplearning.com/"&gt;NN and DL by Michael Nielson&lt;/a&gt;, &lt;a href="https://shapeofdata.wordpress.com/introduction/"&gt;Shape of data by Jesse Johnson&lt;/a&gt;, &lt;a href="http://www.visiondummy.com/"&gt;Computer Vision for dummies by Vincent Spruyt&lt;/a&gt;, &lt;a href="http://freemind.pluskid.org/"&gt;Free Mind by pluskid&lt;/a&gt;, &lt;a href="https://remonstrate.wordpress.com/page/6/?s=PGM&amp;amp;submit=Search"&gt;Probabilistic Graphical Model notes by demonstrate&lt;/a&gt;, &lt;a href="http://www.cnblogs.com/tornadomeet/category/361811.html"&gt;ML notes by tornadomeet&lt;/a&gt;, &lt;a href="http://www.loyhome.com/elements_of_statistical_learining_lecture_notes/"&gt;The elements of statistical learning notes by 落园&lt;/a&gt;, &lt;a href="http://hunch.net/"&gt;ML hunch.net&lt;/a&gt;, &lt;a href="http://blogs.technet.com/b/machinelearning/"&gt;ML blog technet&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/CamDavidsonPilon/Probabilistic-Programming-and-Bayesian-Methods-for-Hackers"&gt;Bayesian Methods for Hackers&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Packages: &lt;a href="http://scikit-learn.org"&gt;Scikit-Learn&lt;/a&gt;, &lt;a href="http://www.csie.ntu.edu.tw/~cjlin/libsvm/"&gt;libsvm&lt;/a&gt;, &lt;a href="https://github.com/josephmisiti/awesome-machine-learning"&gt;list of awesome ml frameworks&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;ReWork-Deep Learning Summits (Gathering of Top Researchers and Geeks) &lt;a href="https://www.re-work.co/events/deep-learning-sanfrancisco-2015"&gt;SF Jan 2015&lt;/a&gt;, &lt;a href="https://www.re-work.co/events/deep-learning-boston-2015"&gt;Boston May 2015&lt;/a&gt;, &lt;a href="https://www.re-work.co/events/deep-learning-london-2015"&gt;London Sep 2015&lt;/a&gt;, &lt;a href="https://www.re-work.co/events/deep-learning-sanfran-2016"&gt;SF Jan 2016&lt;/a&gt;, download brochures by yourself and sniff the frontiers of deep learning both in Academy and Industry.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Computer Vision&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;EBooks: &lt;a href="https://drive.google.com/open?id=0B3aawkjLrbgMY2FPWjNwWnpLS2c&amp;amp;authuser=0"&gt;Collection&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Tutorials &amp;amp;&amp;amp; Courses&lt;ul&gt;
&lt;li&gt;Introductory&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/playlist?list=PLd3hlSJsX_Imk_BPmB_H3AQjFKZS9XgZm"&gt;UCF Computer Vision 2012 by Mubarak Shah&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.cs.wustl.edu/~furukawa/cse559a/2013_fall/schedule.html"&gt;CV 2013 @ WUSTL by Yasutaka Furukawa&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Advanced / Learning Based with Heavy Machine Learning&lt;ul&gt;
&lt;li&gt;Mobile Computer Vision &lt;a href="http://web.eecs.umich.edu/~silvio/teaching/EECS598_2010/class_schedule.html"&gt;2010 @ UMich&lt;/a&gt;, &lt;a href="http://web.stanford.edu/class/cs231m/schedule.html"&gt;2014 @ Stanford&lt;/a&gt; by Silvio Savarese&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.csie.ntu.edu.tw/~mhyang/course/u0030/"&gt;Advanced Topics in Learning and Vision @ NTU by 楊明玄&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.cs.cornell.edu/courses/cs7670/2011fa/"&gt;Special Topics in Computer Vision 2011 @ Cornell by Noah Snavely&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.wisdom.weizmann.ac.il/mathusers/vision/courses/2010_2/schedule.html"&gt;Advanced Topics in CV 2011 @ Weizmann&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://vision.in.tum.de/teaching/ss2013/ml_ss13"&gt;ML for Robotics and CV 2013 @ TUM&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://vasc.ri.cmu.edu/vision_courses/V_Course_Detail.htm"&gt;Vision Courses @ CMU&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.cs.utexas.edu/~grauman/courses/spring2010/schedule.html"&gt;Special Topics in CV 2010&lt;/a&gt; and &lt;a href="http://www.cs.utexas.edu/~cv-fall2012/schedule.html#Course_overview"&gt;Visual Recognition 2012&lt;/a&gt; @ UTexas by Kristen Grauman&lt;/li&gt;
&lt;li&gt;&lt;a href="https://filebox.ece.vt.edu/~S13ECE6504/"&gt;Advanced Topics in CV 2013 @ VirginiaTech&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.mpi-inf.mpg.de/departments/computer-vision-and-multimodal-computing/teaching/courses/high-level-computer-vision-2014/"&gt;High-Level CV 2014 @ MPI-INF&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Visual Object and Activity Recognition Seminar @ Berkeley by Trevor Darrell&lt;/strong&gt; &lt;a href="https://sites.google.com/site/ucbcs29443/syllabus-1"&gt;2014 Fall&lt;/a&gt;, &lt;a href="https://sites.google.com/site/ucbcs29443spring2014archive/syllabus-1"&gt;2014 Spring&lt;/a&gt;, &lt;a href="https://sites.google.com/site/ucb29443spring2013archive/syllabus-1"&gt;2013 Spring&lt;/a&gt;, &lt;a href="https://sites.google.com/site/ucbboltclassarchive2012/syllabus-1"&gt;2012 Spring&lt;/a&gt;, &lt;a href="https://sites.google.com/site/ucbvisualobjactivityarchive11/spring-2011/syllabus"&gt;2011 Spring&lt;/a&gt;, check how fast research topics changes in recent years &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Reviews / PhD Theses: to be added&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;Others&lt;ul&gt;
&lt;li&gt;&lt;a href="http://arxiv.org/list/cs.CV/recent"&gt;ArXiv Computer Vision&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://muq.org/~cynbe/vtopics.html"&gt;Computer Vision Papers By Topic&lt;/a&gt;, &lt;a href="http://homepages.inf.ed.ac.uk/rbf/CVonline/CVentry.htm"&gt;CVonline Compendium&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://computervisionblog.wordpress.com/2012/02/10/the-most-cited-papers-in-computer-vision/"&gt;The mosted cited papers in CV upto 2012&lt;/a&gt;, &lt;a href="http://quantombone.blogspot.hk/2015/01/from-feature-descriptors-to-deep.html"&gt;20 years of cv by Tomasz Malisiewicz 2015&lt;/a&gt; &lt;/li&gt;
&lt;li&gt;&lt;a href="http://rodrigob.github.io/are_we_there_yet/build/#about"&gt;Who is the best at X&lt;/a&gt;, &lt;a href="https://github.com/soumith/convnet-benchmarks"&gt;ConvNet benchmarks&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Packages: &lt;a href="http://libccv.org/"&gt;CCV&lt;/a&gt;, &lt;a href="http://www.vlfeat.org/index.html"&gt;VLFeat&lt;/a&gt;, &lt;a href="https://github.com/rbgirshick/rcnn"&gt;RCNN&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Researchers and Blogs: &lt;a href="http://www.cs.berkeley.edu/~rbg/"&gt;Ross Girshick&lt;/a&gt;, &lt;a href="https://computervisionblog.wordpress.com/"&gt;the Serious Computer Vision Blog by Li Yang Ku&lt;/a&gt;, &lt;a href="http://quantombone.blogspot.hk/"&gt;tombone's cv blog by Tomasz Malisiewicz&lt;/a&gt;, &lt;a href="http://eric-yuan.me/"&gt;Eric Yuan&lt;/a&gt;, &lt;a href="http://bbabenko.tumblr.com/"&gt;bbabenko - lacking capitals&lt;/a&gt;, CVChina&lt;a href="http://www.cvchina.info/"&gt;.info&lt;/a&gt; and &lt;a href="http://www.cvchina.net/"&gt;.net&lt;/a&gt;, CV牛人 &lt;a href="http://blog.csdn.net/chuminnan2010/article/details/23524461"&gt;一&lt;/a&gt;, &lt;a href="http://blog.csdn.net/carson2005/article/details/6601109"&gt;二&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;&lt;a href="https://webdocs.cs.ualberta.ca/~zaiane/htmldocs/ConfRanking.html"&gt;Computer Science Conference Rankings&lt;/a&gt;&lt;/h3&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Zheng Rui</dc:creator><pubDate>Tue, 10 Feb 2015 00:00:00 +0800</pubDate><guid isPermaLink="false">tag:,2015-02-10:ML-CV-Resource.html</guid><category>Computer Vision</category><category>Machine Learning</category></item><item><title>NULL</title><link>/my-underfit-personality.html</link><description>&lt;h3&gt;&lt;em&gt;I am quite underfit, need some nonlinear activation.&lt;/em&gt;&lt;/h3&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Zheng Rui</dc:creator><pubDate>Wed, 14 Jan 2015 00:00:00 +0800</pubDate><guid isPermaLink="false">tag:,2015-01-14:my-underfit-personality.html</guid><category>Funny</category></item><item><title>Domain adaptation with caffe features (Experiment)</title><link>/transfer-learning-office-dataset.html</link><description>&lt;h3&gt;Concepts&lt;/h3&gt;
&lt;p&gt;While most images for training are produced with high quality using digital cameras, maybe with label, the domain of interests in real world could differ in some combination of factors, including scene, intra-category variation, object location and pose..., maybe without label, domain adaption algorithms is trying to minimize this domain shift performance degradation.&lt;/p&gt;
&lt;h3&gt;Experiment&lt;/h3&gt;
&lt;p&gt;Try to implement 4.2 part in paper: &lt;a href="http://arxiv.org/abs/1310.1531"&gt;DeCAF: A Deep Convolutional Activation Feature for Generic Visual Recogntion&lt;/a&gt;&lt;/p&gt;
&lt;h4&gt;Office Dataset&lt;/h4&gt;
&lt;p&gt;&lt;a href="http://vision.cs.uml.edu/adaptation.html"&gt;Download link&lt;/a&gt;, including raw images, SurfFeatures, SurfFeatures with object id, DeCaf features, 31 categories (pen, scissor, bike...). My office dataset folder tree view (up to level 2):&lt;/p&gt;
&lt;p&gt;&lt;img src="images/domainAdapt/office-dataset-folder-tree.png"&gt;&lt;/p&gt;
&lt;h4&gt;t-SNE clustering results using Surf features and Decaf features&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;t-SNE
&lt;a href="http://homepage.tudelft.nl/19j49/t-SNE.html"&gt;Home Page on TuDelft&lt;/a&gt;, &lt;a href="http://lvdmaaten.github.io/tsne/code/tSNE_matlab.zip"&gt;Matlab implementation download link&lt;/a&gt;, usage example (mnist dataset):&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Treeview of my t-SNE package folder, add it into Matlab's search path. &lt;/p&gt;
&lt;p&gt;&lt;img src="images/domainAdapt/t-sne-standard-folder-tree.png"&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;train_X&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;loadMNISTImages&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;DataTest/mnist/train-images-idx3-ubyte&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;train_X&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;train_X&lt;/span&gt;&lt;span class="o"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;train_labels&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;loadMNISTLabels&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;DataTest/mnist/train-labels-idx1-ubyte&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;ind&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;randperm&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;size&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;train_X&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;train_X_show&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;train_X&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ind&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;5000&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="p"&gt;:);&lt;/span&gt; 
&lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;train_labels_show&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;train_labels&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ind&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;5000&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;no_dims&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;init_dims&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;30&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; 
&lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;perplexity&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;30&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; 
&lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;mappedX&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;tsne&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;train_X_show&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;train_labels_show&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;no_dims&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;init_dims&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;perplexity&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="n"&gt;Preprocessing&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt; &lt;span class="n"&gt;using&lt;/span&gt; &lt;span class="n"&gt;PCA&lt;/span&gt;&lt;span class="c"&gt;...&lt;/span&gt;
&lt;span class="n"&gt;Computed&lt;/span&gt; &lt;span class="n"&gt;P&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;values&lt;/span&gt; &lt;span class="mi"&gt;500&lt;/span&gt; &lt;span class="n"&gt;of&lt;/span&gt; &lt;span class="mi"&gt;5000&lt;/span&gt; &lt;span class="n"&gt;datapoints&lt;/span&gt;&lt;span class="c"&gt;...&lt;/span&gt;
&lt;span class="n"&gt;Computed&lt;/span&gt; &lt;span class="n"&gt;P&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;values&lt;/span&gt; &lt;span class="mi"&gt;1000&lt;/span&gt; &lt;span class="n"&gt;of&lt;/span&gt; &lt;span class="mi"&gt;5000&lt;/span&gt; &lt;span class="n"&gt;datapoints&lt;/span&gt;&lt;span class="c"&gt;...&lt;/span&gt;
&lt;span class="n"&gt;Computed&lt;/span&gt; &lt;span class="n"&gt;P&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;values&lt;/span&gt; &lt;span class="mi"&gt;1500&lt;/span&gt; &lt;span class="n"&gt;of&lt;/span&gt; &lt;span class="mi"&gt;5000&lt;/span&gt; &lt;span class="n"&gt;datapoints&lt;/span&gt;&lt;span class="c"&gt;...&lt;/span&gt;
&lt;span class="n"&gt;Computed&lt;/span&gt; &lt;span class="n"&gt;P&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;values&lt;/span&gt; &lt;span class="mi"&gt;2000&lt;/span&gt; &lt;span class="n"&gt;of&lt;/span&gt; &lt;span class="mi"&gt;5000&lt;/span&gt; &lt;span class="n"&gt;datapoints&lt;/span&gt;&lt;span class="c"&gt;...&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;.
. 
.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;Iteration&lt;/span&gt; &lt;span class="mi"&gt;990&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;error&lt;/span&gt; &lt;span class="n"&gt;is&lt;/span&gt; &lt;span class="mf"&gt;1.3156&lt;/span&gt;
&lt;span class="n"&gt;Iteration&lt;/span&gt; &lt;span class="mi"&gt;1000&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;error&lt;/span&gt; &lt;span class="n"&gt;is&lt;/span&gt; &lt;span class="mf"&gt;1.315&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;gscatter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;mappedX&lt;/span&gt;&lt;span class="p"&gt;(:,&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;mappedX&lt;/span&gt;&lt;span class="p"&gt;(:,&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;train_labels_show&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;code&gt;loadMNISTImages()&lt;/code&gt; function and &lt;code&gt;loadMNISTLabels()&lt;/code&gt; function can be found in &lt;a href="http://deeplearning.stanford.edu/wiki/index.php/Using_the_MNIST_Dataset"&gt;ufldl tutorial&lt;/a&gt;. The max iteration value can be changed in &lt;code&gt;tsne_p.m&lt;/code&gt; file. Result:&lt;/p&gt;
&lt;p&gt;&lt;img src="images/domainAdapt/t-sne-mnist.png"&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;create thumbnails (30x30)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;script for creating thumbnails (resize.sh):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="ch"&gt;#!/bin/bash&lt;/span&gt;

&lt;span class="c1"&gt;# create directories &lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; Folder in &lt;span class="sb"&gt;`&lt;/span&gt;find &lt;span class="s2"&gt;&amp;quot;./images/&amp;quot;&lt;/span&gt; -type d -not -path &lt;span class="s2"&gt;&amp;quot;./images/amazon*&amp;quot;&lt;/span&gt;&lt;span class="sb"&gt;`&lt;/span&gt;
&lt;span class="k"&gt;do&lt;/span&gt;
    &lt;span class="nv"&gt;NewFolder30x30&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;Folder&lt;/span&gt;&lt;span class="p"&gt;/images/thumbnails&lt;/span&gt;&lt;span class="se"&gt;\/&lt;/span&gt;&lt;span class="nv"&gt;30x30&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
    &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;mkdir: &amp;quot;&lt;/span&gt;&lt;span class="nv"&gt;$NewFolder30x30&lt;/span&gt;
    mkdir -p &lt;span class="nv"&gt;$NewFolder30x30&lt;/span&gt;
&lt;span class="k"&gt;done&lt;/span&gt;

&lt;span class="c1"&gt;# convert images&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; Img in &lt;span class="sb"&gt;`&lt;/span&gt;find &lt;span class="s2"&gt;&amp;quot;./images/&amp;quot;&lt;/span&gt; -name &lt;span class="s2"&gt;&amp;quot;*.jpg&amp;quot;&lt;/span&gt; -not -path &lt;span class="s2"&gt;&amp;quot;./images/amazon/*&amp;quot;&lt;/span&gt;&lt;span class="sb"&gt;`&lt;/span&gt;
&lt;span class="k"&gt;do&lt;/span&gt;
    &lt;span class="nv"&gt;NewImg30x30&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;Img&lt;/span&gt;&lt;span class="p"&gt;/images/thumbnails&lt;/span&gt;&lt;span class="se"&gt;\/&lt;/span&gt;&lt;span class="nv"&gt;30x30&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; 
    &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Resizing image: &amp;quot;&lt;/span&gt;&lt;span class="nv"&gt;$NewImg30x30&lt;/span&gt;
    convert -resize 30x30&lt;span class="se"&gt;\!&lt;/span&gt; &lt;span class="nv"&gt;$Img&lt;/span&gt; &lt;span class="nv"&gt;$NewImg30x30&lt;/span&gt;
&lt;span class="k"&gt;done&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;load features and run t-SNE&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;For Surf features(surf.m):&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;clear&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;clc&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="n"&gt;system&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;find &amp;quot;../SurfFeatures/&amp;quot; -name &amp;quot;*800*.mat&amp;quot; -not -path &amp;quot;../SurfFeatures/amazon/*&amp;quot; &amp;gt; fea_WRAPUP.txt&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="c"&gt;% load feature vectors&lt;/span&gt;
&lt;span class="n"&gt;fid&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;fopen&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;fea_WRAPUP.txt&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="n"&gt;feaFiles&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;textscan&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fid&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;%s&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="n"&gt;feaVecs&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;zeros&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;length&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;feaFiles&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;}),&lt;/span&gt; &lt;span class="mi"&gt;800&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="nb"&gt;i&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nb"&gt;length&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;feaFiles&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt;
    &lt;span class="n"&gt;load&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;feaFiles&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;}{&lt;/span&gt;&lt;span class="nb"&gt;i&lt;/span&gt;&lt;span class="p"&gt;});&lt;/span&gt;
    &lt;span class="n"&gt;feaVecs&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;i&lt;/span&gt;&lt;span class="p"&gt;,:)&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;histogram&lt;/span&gt;&lt;span class="o"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="n"&gt;fclose&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fid&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;


&lt;span class="c"&gt;% construct labels&lt;/span&gt;
&lt;span class="n"&gt;fid&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;fopen&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;fea_WRAPUP.txt&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="n"&gt;feaFiles&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;textscan&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fid&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;%s%s%s%s%s%s&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;delimiter&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;/&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="n"&gt;labels&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;zeros&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;length&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;feaFiles&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;}),&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="n"&gt;uniqueDomain&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;unique&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;feaFiles&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="n"&gt;uniqueCate&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;unique&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;feaFiles&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="nb"&gt;i&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nb"&gt;length&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;feaFiles&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt;
    &lt;span class="n"&gt;labels&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nb"&gt;find&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;strcmp&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;uniqueCate&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;feaFiles&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;}(&lt;/span&gt;&lt;span class="nb"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="c"&gt;...&lt;/span&gt;
                &lt;span class="nb"&gt;find&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;strcmp&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;uniqueDomain&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;feaFiles&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;}(&lt;/span&gt;&lt;span class="nb"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="c"&gt;% run tsne clustering&lt;/span&gt;
&lt;span class="n"&gt;no_dims&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="n"&gt;init_dims&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;30&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="n"&gt;perplexity&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;30&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="n"&gt;mappedX&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;tsne&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;feaVecs&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;labels&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;no_dims&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;init_dims&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;perplexity&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="c"&gt;%gscatter(mappedX(:,1), mappedX(:,2), labels);&lt;/span&gt;

&lt;span class="c"&gt;% write to file for displaying images overlayed with each other&lt;/span&gt;
&lt;span class="n"&gt;x_min&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;min&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;mappedX&lt;/span&gt;&lt;span class="p"&gt;(:,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;span class="n"&gt;x_max&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;max&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;mappedX&lt;/span&gt;&lt;span class="p"&gt;(:,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;span class="n"&gt;y_min&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;min&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;mappedX&lt;/span&gt;&lt;span class="p"&gt;(:,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;span class="n"&gt;y_max&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;max&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;mappedX&lt;/span&gt;&lt;span class="p"&gt;(:,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;span class="n"&gt;BIGIMG&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;ones&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;int16&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x_max&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;x_min&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;60&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="c"&gt;...&lt;/span&gt;
    &lt;span class="n"&gt;int16&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;y_max&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;y_min&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;60&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;256&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="n"&gt;wid&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;fopen&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;tsne.res&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;w&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="nb"&gt;i&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nb"&gt;length&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;feaFiles&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt;
    &lt;span class="n"&gt;imgSrc&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;strcat&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;../thumbnails/30x30/&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;feaFiles&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;}{&lt;/span&gt;&lt;span class="nb"&gt;i&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;/images/&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="c"&gt;...&lt;/span&gt;
                    &lt;span class="n"&gt;feaFiles&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;}{&lt;/span&gt;&lt;span class="nb"&gt;i&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;/frame_&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;feaFiles&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;}{&lt;/span&gt;&lt;span class="nb"&gt;i&lt;/span&gt;&lt;span class="p"&gt;}(&lt;/span&gt;&lt;span class="mi"&gt;11&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;14&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;.jpg&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;fprintf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;wid&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;%f %f %s\n&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;mappedX&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;i&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;mappedX&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;i&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;imgSrc&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;img&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;imread&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;imgSrc&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;x_start&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;int16&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;mappedX&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;i&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;x_min&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;15&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;y_start&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;int16&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;mappedX&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;i&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;y_min&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;15&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;BIGIMG&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x_start&lt;/span&gt;&lt;span class="p"&gt;:(&lt;/span&gt;&lt;span class="n"&gt;x_start&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;29&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;y_start&lt;/span&gt;&lt;span class="p"&gt;:(&lt;/span&gt;&lt;span class="n"&gt;y_start&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;29&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="p"&gt;:)&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;img&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="n"&gt;fclose&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fid&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="n"&gt;fclose&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;wid&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="n"&gt;BIGIMG&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;BIGIMG&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;256&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="n"&gt;imshow&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;BIGIMG&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="n"&gt;imwrite&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;BIGIMG&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;surftsne.jpg&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;jpg&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;For DeCaf features(decaf.m):&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;clear&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;clc&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="n"&gt;system&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;find &amp;quot;../DecafFeatures/&amp;quot; -name &amp;quot;*.mat&amp;quot; -not -path &amp;quot;../DecafFeatures/amazon/*&amp;quot; &amp;gt; fea_WRAPUP.txt&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="c"&gt;% load feature vectors&lt;/span&gt;
&lt;span class="n"&gt;fid&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;fopen&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;fea_WRAPUP.txt&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="n"&gt;feaFiles&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;textscan&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fid&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;%s&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="n"&gt;feaVecs&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;zeros&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;length&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;feaFiles&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;}),&lt;/span&gt; &lt;span class="mi"&gt;4096&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="nb"&gt;i&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nb"&gt;length&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;feaFiles&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt;
    &lt;span class="n"&gt;load&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;feaFiles&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;}{&lt;/span&gt;&lt;span class="nb"&gt;i&lt;/span&gt;&lt;span class="p"&gt;});&lt;/span&gt;
    &lt;span class="n"&gt;feaVecs&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;i&lt;/span&gt;&lt;span class="p"&gt;,:)&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;fc7&lt;/span&gt;&lt;span class="o"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="n"&gt;fclose&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fid&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;


&lt;span class="c"&gt;% construct labels&lt;/span&gt;
&lt;span class="n"&gt;fid&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;fopen&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;fea_WRAPUP.txt&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="n"&gt;feaFiles&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;textscan&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fid&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;%s%s%s%s%s%s&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;delimiter&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;/&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="n"&gt;labels&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;zeros&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;length&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;feaFiles&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;}),&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="n"&gt;uniqueDomain&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;unique&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;feaFiles&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="n"&gt;uniqueCate&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;unique&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;feaFiles&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="nb"&gt;i&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nb"&gt;length&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;feaFiles&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt;
    &lt;span class="n"&gt;labels&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nb"&gt;find&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;strcmp&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;uniqueCate&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;feaFiles&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;}(&lt;/span&gt;&lt;span class="nb"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="c"&gt;... &lt;/span&gt;
                &lt;span class="nb"&gt;find&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;strcmp&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;uniqueDomain&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;feaFiles&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;}(&lt;/span&gt;&lt;span class="nb"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;   
&lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="c"&gt;% run tsne clustering&lt;/span&gt;
&lt;span class="n"&gt;no_dims&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="n"&gt;init_dims&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;30&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; 
&lt;span class="n"&gt;perplexity&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;30&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; 
&lt;span class="n"&gt;mappedX&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;tsne&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;feaVecs&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;labels&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;no_dims&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;init_dims&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;perplexity&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="c"&gt;%gscatter(mappedX(:,1), mappedX(:,2), labels);&lt;/span&gt;

&lt;span class="c"&gt;% write to file for displaying images overlayed with each other&lt;/span&gt;
&lt;span class="n"&gt;x_min&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;min&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;mappedX&lt;/span&gt;&lt;span class="p"&gt;(:,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;span class="n"&gt;x_max&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;max&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;mappedX&lt;/span&gt;&lt;span class="p"&gt;(:,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;span class="n"&gt;y_min&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;min&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;mappedX&lt;/span&gt;&lt;span class="p"&gt;(:,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;span class="n"&gt;y_max&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;max&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;mappedX&lt;/span&gt;&lt;span class="p"&gt;(:,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;span class="n"&gt;BIGIMG&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;ones&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;int16&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x_max&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;x_min&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;60&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="c"&gt;... &lt;/span&gt;
    &lt;span class="n"&gt;int16&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;y_max&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;y_min&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;60&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;256&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="n"&gt;wid&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;fopen&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;tsne.res&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;w&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="nb"&gt;i&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nb"&gt;length&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;feaFiles&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt;
    &lt;span class="n"&gt;imgSrc&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;strcat&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;../thumbnails/30x30/&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;feaFiles&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;}{&lt;/span&gt;&lt;span class="nb"&gt;i&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;/images/&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="c"&gt;...&lt;/span&gt;
                    &lt;span class="n"&gt;feaFiles&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;}{&lt;/span&gt;&lt;span class="nb"&gt;i&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;/&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;feaFiles&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;}{&lt;/span&gt;&lt;span class="nb"&gt;i&lt;/span&gt;&lt;span class="p"&gt;}(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;.jpg&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;fprintf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;wid&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;%f %f %s\n&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;mappedX&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;i&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;mappedX&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;i&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;imgSrc&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;img&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;imread&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;imgSrc&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;x_start&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;int16&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;mappedX&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;i&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;x_min&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;15&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; 
    &lt;span class="n"&gt;y_start&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;int16&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;mappedX&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;i&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;y_min&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;15&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; 
    &lt;span class="n"&gt;BIGIMG&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x_start&lt;/span&gt;&lt;span class="p"&gt;:(&lt;/span&gt;&lt;span class="n"&gt;x_start&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;29&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;y_start&lt;/span&gt;&lt;span class="p"&gt;:(&lt;/span&gt;&lt;span class="n"&gt;y_start&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;29&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="p"&gt;:)&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;img&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="n"&gt;fclose&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fid&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="n"&gt;fclose&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;wid&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="n"&gt;BIGIMG&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;BIGIMG&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;256&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="n"&gt;imshow&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;BIGIMG&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="n"&gt;imwrite&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;BIGIMG&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;decaftsne.jpg&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;jpg&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;Result using surf features:&lt;/p&gt;
&lt;p&gt;&lt;img src="images/domainAdapt/surftsne.jpg"&gt;&lt;/p&gt;
&lt;p&gt;Result using decaf features:&lt;/p&gt;
&lt;p&gt;&lt;img src="images/domainAdapt/decaftsne.jpg"&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;domain shift classification (objrecog.m)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;For amazon domain, take 20 samples from each category, for dslr and webcam domain, take 8 samples from each category, using libsvm tool, first get a model from source domain (could be combined with the target webcam domain), then test the model with the remaining samples in webcam domain. Preprocessing steps is to load data and split them 10 times.&lt;/p&gt;
&lt;p&gt;Result:&lt;/p&gt;
&lt;p&gt;&lt;img src="images/domainAdapt/SvmClassificationResult.png"&gt;&lt;/p&gt;
&lt;!--
                                     Surf                    DeCAF

amazon          -&gt; webcam,  11.974406 +- 1.434968,  48.976234 +- 3.488374
dslr            -&gt; webcam,  31.444241 +- 1.942398,  81.243144 +- 1.447721
webcam          -&gt; webcam,  64.149909 +- 1.956589,  82.321755 +- 2.656315
amazon + webcam -&gt; webcam,  55.155393 +- 1.862465,  59.963437 +- 2.491779
dslr + webcam   -&gt; webcam,  62.175503 +- 1.883087,  87.001828 +- 1.432896
--&gt;

&lt;p&gt;&lt;a href="https://github.com/ZhengRui/DomainAdaptationExp"&gt;project code&lt;/a&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Zheng Rui</dc:creator><pubDate>Mon, 29 Sep 2014 00:00:00 +0800</pubDate><guid isPermaLink="false">tag:,2014-09-29:transfer-learning-office-dataset.html</guid><category>Computer Vision</category><category>Deep Learning</category></item><item><title>Configuration of Multiple Python Versions Using Pyenv</title><link>/multiple-python-with-pyenv.html</link><description>&lt;h4&gt;Installation of &lt;a href="https://github.com/yyuu/pyenv"&gt;Pyenv&lt;/a&gt;:&lt;/h4&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ git clone https://github.com/yyuu/pyenv.git ~/.pyenv
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Add this to .bashrc file&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;#Add for pyenv&lt;/span&gt;
&lt;span class="nb"&gt;export&lt;/span&gt; &lt;span class="nv"&gt;PYENV_ROOT&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="nv"&gt;$HOME&lt;/span&gt;&lt;span class="s2"&gt;/.pyenv&amp;quot;&lt;/span&gt;
&lt;span class="nb"&gt;export&lt;/span&gt; &lt;span class="nv"&gt;PATH&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="nv"&gt;$PYENV_ROOT&lt;/span&gt;&lt;span class="s2"&gt;/bin:&lt;/span&gt;&lt;span class="nv"&gt;$PATH&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;
&lt;span class="nb"&gt;eval&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;pyenv init -&lt;span class="k"&gt;)&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;To check the available python version for installation, run &lt;code&gt;pyenv install -l&lt;/code&gt;. I stalled python3.3.2 using &lt;code&gt;pyenv install 3.3.2&lt;/code&gt;, using &lt;code&gt;pyenv versions&lt;/code&gt; can get the installed python versions:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ pyenv versions
* system
  3.3.2
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;In "~/.pyenv/" folder, the default 2.7.3 version is linked by "shims/", while 3.3.2 version is installed in "versions/" folder. Run &lt;code&gt;~/.pyenv/versions/3.3.2/bin/pip install PACKAGENAME&lt;/code&gt; will automatically install packages for python3 and put the libs in folder &lt;code&gt;~/.pyenv/versions/3.3.2/lib/python3.3/site-packages/&lt;/code&gt;, by this way of local installation, it won't mess up system's default python relevant packages. You can check the installed packages for each version by running &lt;code&gt;~/.pyenv/versions/3.3.2/bin/pip freeze&lt;/code&gt; and &lt;code&gt;pip freeze&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;There are 3 ways of switch to 3.3.2 version:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ pyenv global 3.3.2 # set global python version
$ pyenv local 3.3.2  # set local python version for current folder
$ pyenv shell 3.3.2  # set python version for current shell session
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;the 2nd way is highly recommended, when you enter the folder whose local python version is set to be python3, when type &lt;code&gt;python&lt;/code&gt;, it will automatically run python3, when &lt;code&gt;cd&lt;/code&gt; out of the folder and type &lt;code&gt;python&lt;/code&gt;, it will automatically switch back to system's default python2, it's amazing. This way we can run notebook for ipython3 in that folder.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Zheng Rui</dc:creator><pubDate>Fri, 19 Sep 2014 00:00:00 +0800</pubDate><guid isPermaLink="false">tag:,2014-09-19:multiple-python-with-pyenv.html</guid><category>Python</category></item><item><title>Single View Metrology</title><link>/singleviewmetrology.html</link><description>&lt;p&gt;This computer vision project is to construct a 3D model from a single image plus some prior knowledge about the objects' coordinates in the image. It's based on this &lt;a href="http://www.cs.cmu.edu/~ph/869/papers/Criminisi99.pdf"&gt;paper&lt;/a&gt;. You can download the code from &lt;a href="https://github.com/ZhengRui/Single-View-Metrology"&gt;here&lt;/a&gt;. Here is a sample 3D model (right) built from a image (left).&lt;/p&gt;
&lt;p&gt;&lt;img width="300" alt=""desk"" title=""desk"" src="/images/singleVM/desk.jpg"&gt;
&lt;img width="400" alt=""3Ddesk"" title=""3Ddesk"" src="/images/singleVM/desk3d.png"&gt;&lt;/p&gt;
&lt;p&gt;You should first know something about concepts like &lt;a href="http://en.wikipedia.org/wiki/Perspective_%28graphical%29"&gt;Perspective projection&lt;/a&gt;, &lt;a href="http://en.wikipedia.org/wiki/Pinhole_camera_model"&gt;Pinhole camera model&lt;/a&gt;, &lt;a href="http://en.wikipedia.org/wiki/Homogeneous_coordinates"&gt;Homogeneous coordinates&lt;/a&gt;. A &lt;a href="http://deltaorange.com/2012/03/08/the-truth-behind-homogenous-coordinates/"&gt;good post&lt;/a&gt; about homogeneous coordinates, and a &lt;a href="https://www.youtube.com/watch?v=q3turHmOWq4"&gt;good video&lt;/a&gt; about projective geometry. Then here are some survey [&lt;a href="http://kusemanohar.files.wordpress.com/2014/03/singleviewmetrologyfinalreport.pdf"&gt;1&lt;/a&gt;, &lt;a href="http://www.cs.ucf.edu/~tmoore/projects/svm/FinalReport.pdf"&gt;2&lt;/a&gt;, &lt;a href="http://www.mit.edu/~sysun/ComputerVision/SVM.pdf"&gt;3&lt;/a&gt;] about svm. Check the following links to get a sense of single view metrology:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://ihome.ust.hk/~yyuanad/SVM/index.html"&gt;Zheng Amin, Yuan Yuan&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://ihome.ust.hk/~hyangac/SVM/index.html"&gt;HAIYAN YANG&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.cs.cornell.edu/courses/CS4670/2012fa/projects/p4/final_artifacts/Submissions/myw9/webpage/index.htm"&gt;Michael Wu&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.cs.cmu.edu/~ph/869/src/asst3/asst3.html"&gt;CMU: Image-Based Modeling and Rendering 13 Assignment3&lt;/a&gt; and &lt;a href="http://www.cs.cmu.edu/~ph/869/results/asst3_results.html"&gt;Best Results&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.cs.cornell.edu/courses/CS4670/2012fa/projects/p4/index.html"&gt;Cornell: CS4670/5670 computer vision Fall 2012&lt;/a&gt;. The design of my user interaction part comes from the experience of using their svm tool.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The tool i used to view .vrml file is &lt;a href="http://castle-engine.sourceforge.net/view3dscene.php"&gt;view3dscene&lt;/a&gt; under ubuntu12.04. I highly recommend this tool.&lt;/p&gt;
&lt;h3&gt;How to calculate&lt;/h3&gt;
&lt;h4&gt;vanishing point&lt;/h4&gt;
&lt;p&gt;Vanishing point is easy to understand, parallel lines in one direction will ends up on the vanishing point at infinity. Basically it needs you to manually specify two or more parallel lines (in &lt;span class="math"&gt;\(X\)&lt;/span&gt; direction and &lt;span class="math"&gt;\(Y\)&lt;/span&gt; direction) in the image and calculate their common intersection point (get &lt;span class="math"&gt;\(X\)&lt;/span&gt; vanishing point and &lt;span class="math"&gt;\(Y\)&lt;/span&gt; vanishing point respectively).&lt;/p&gt;
&lt;p&gt;Mathmatically, to calculate a common intersection point of multiple parallel lines, it involves solving an over determined equation array problem (# of equations greater than # of variables). You can use &lt;em&gt;Robert T Collins&lt;/em&gt; method, this will make it transform into a non-overdetermined problem, which is very easy to solve, the basic idea is (the following picture was originally an email from Collins to Steve Seitz):&lt;/p&gt;
&lt;p&gt;&lt;img width="500" alt=""collins"" title=""collins"" src="/images/singleVM/collins.png"&gt;
&lt;img width="500" alt=""collins2"" title=""collins2"" src="/images/singleVM/collins2.png"&gt;&lt;/p&gt;
&lt;p&gt;After get the &lt;span class="math"&gt;\(M\)&lt;/span&gt; matrix, i recommend using &lt;a href="http://eigen.tuxfamily.org/dox/GettingStarted.html"&gt;Eigen3&lt;/a&gt; package to solve the eigen values problem. Also in the other part of this project, i use Eigen3 package to manipulate matrix operations and calculate their eigen values, incluing calculating the homography matrix and &lt;span class="math"&gt;\(\alpha_z\)&lt;/span&gt;.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;After load a picture, right mouse for drugging, wheel for zooming. "Edit"-"Rescale" is for scaling to the original image size.&lt;/li&gt;
&lt;li&gt;"Edit"-"XLines", then left click to choose the parallel lines in &lt;span class="math"&gt;\(X\)&lt;/span&gt; direction (shown with read endpoints and lines).&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img width="400" alt=""x parallel lines"" title=""x parallel lines"" src="/images/singleVM/xlines.png"&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;"Alt+d" to delete previous choosen point, "Ctrl+LeftClick" to choose one of the previous points which is under the cursor.&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;"Calculation"-"XVPoint", calculate the x vanishing point, output:&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- {% img /images/singleVM/xvp.png 400 "x vanishing point" %} --&gt;

&lt;pre&gt;
Please pick up endpoints of lines pointing in X direction

------------------------------------------------
1.18115e-06    2.3329e-06    -0.00153243    
2.3329e-06    4.61483e-06    -0.00301752    
-0.00153243    -0.00301752    2    

 Eigen Values: 
-3.55187e-17
 6.91139e-08
     2.00001

 Eigen Vectors: 
   0.948123    0.317904 0.000766213
  -0.317905    0.948121  0.00150876
0.000246823  0.00167407   -0.999999

Vanishing point position: (3841.3, -1287.98)
------------------------------------------------
&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;Repeat the same step to get the y vanishing point (green endpoints and lines).&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img width="400" alt=""y parallel lines"" title=""y parallel lines"" src="/images/singleVM/ylines.png"&gt;
&lt;!-- &lt;img width="400" alt=""y vanishing point"" title=""y vanishing point"" src="/images/singleVM/yvp.png"&gt; --&gt;&lt;/p&gt;
&lt;pre&gt;
Please pick up endpoints of lines pointing in Y direction

------------------------------------------------
6.30766e-05    -8.30239e-05    0.0106216    
-8.30239e-05    0.000109337    -0.0138698    
0.0106216    -0.0138698    2    

 Eigen Values: 
-2.49691e-16
 1.98177e-05
     2.00015

 Eigen Vectors: 
    0.814622     0.579968   0.00531067
    0.579992    -0.814593  -0.00693469
-0.000304136  -0.00872929     0.999962

Vanishing point position: (-2678.48, -1907.01)
------------------------------------------------
&lt;/pre&gt;

&lt;h4&gt;homography matrix&lt;/h4&gt;
&lt;p&gt;Basically, i use the method in this &lt;a href="http://ezekiel.vancouver.wsu.edu/~cs330/projects/homography/homography.pdf"&gt;file&lt;/a&gt; to calculate the homography matrix.
It involves LU decomposition which can be calculated using Eigen3 (I have tried to implement by myself, but the performance is bad).&lt;/p&gt;
&lt;p&gt;The complete projection matrix &lt;span class="math"&gt;\(P\)&lt;/span&gt; which projects a 3D(real world) homogeneous coordinate &lt;span class="math"&gt;\((X,Y,Z,1)^{T}\)&lt;/span&gt; to a 2D(image pixel) homogeneous coordinate &lt;span class="math"&gt;\((U,V,1)^{T}\)&lt;/span&gt; is a &lt;span class="math"&gt;\(3\times4\)&lt;/span&gt; matrix, which is actually &lt;span class="math"&gt;\([\alpha_xV_x, \alpha_yV_y, \alpha_zV_z, O]\)&lt;/span&gt;, where &lt;span class="math"&gt;\(V_x\)&lt;/span&gt;, &lt;span class="math"&gt;\(V_y\)&lt;/span&gt;, &lt;span class="math"&gt;\(V_z\)&lt;/span&gt; are the homogeneous coordinates for &lt;span class="math"&gt;\(x,y,z\)&lt;/span&gt; vanishing points, &lt;span class="math"&gt;\(O\)&lt;/span&gt; is the homogeneous coordinates for the origin. When we are talking about plane &lt;span class="math"&gt;\(Z=0\)&lt;/span&gt;, &lt;span class="math"&gt;\(P\)&lt;/span&gt;'s third column can be ignored because &lt;span class="math"&gt;\(Z\)&lt;/span&gt; is always equal to 0, so &lt;span class="math"&gt;\(P\)&lt;/span&gt; becomes the homograph matrix &lt;span class="math"&gt;\(H\)&lt;/span&gt;, which is &lt;span class="math"&gt;\([\alpha_xV_x, \alpha_yV_y, O]\)&lt;/span&gt;.&lt;/p&gt;
&lt;p&gt;Let's say we have a 3D homogenous cooridinate &lt;span class="math"&gt;\((X,Y,0,1)^T\)&lt;/span&gt; and its corresponding 2D homogenous coordinate &lt;span class="math"&gt;\((U,V,1)^T\)&lt;/span&gt;, then &lt;span class="math"&gt;\(H\)&lt;/span&gt; applied on &lt;span class="math"&gt;\((X,Y,1)^T\)&lt;/span&gt; should give &lt;span class="math"&gt;\((u,v,w)^T\)&lt;/span&gt; where &lt;span class="math"&gt;\(\frac{u}{w} = U\)&lt;/span&gt;, and &lt;span class="math"&gt;\(\frac{v}{w} = V\)&lt;/span&gt;, so &lt;span class="math"&gt;\(H\)&lt;/span&gt; actually have only 8 independant parameters and each 3D-2D coordinate pair contributes two equations. So theoritically we only need 4 pairs to solve these parameters. Now if we already have &lt;span class="math"&gt;\(V_x\)&lt;/span&gt; and &lt;span class="math"&gt;\(V_y\)&lt;/span&gt;, then we actually have only 4 parameters &lt;span class="math"&gt;\(\alpha_x\)&lt;/span&gt;, &lt;span class="math"&gt;\(\alpha_y\)&lt;/span&gt;, and 2 in &lt;span class="math"&gt;\(O\)&lt;/span&gt; undetermined, so if given the vanishing points in &lt;span class="math"&gt;\(X\)&lt;/span&gt; and &lt;span class="math"&gt;\(Y\)&lt;/span&gt; direction, we need 2 more cooridinate pairs (they should not be colinear with any vanishing point) to calculate the left 4 parameters (which in total, still 4 pairs to determine &lt;span class="math"&gt;\(H\)&lt;/span&gt;, 2 vanishing points plus 2 extra pairs, actually using the 2 vanishing points and 2 extra pairs which are not colinear with any vanishing point, we can get another 2 extra pairs). Actually &lt;span class="math"&gt;\(\alpha\)&lt;/span&gt; indicates the scale (or decreasing speed) in that direction, the vanishing point in that direction and 2 extra pairs which are colinear with the vanishing point will determine the scale, which is &lt;span class="math"&gt;\(\alpha\)&lt;/span&gt;. &lt;/p&gt;
&lt;p&gt;Anyway, there are 3 ways to calculate &lt;span class="math"&gt;\(H\)&lt;/span&gt;:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;4 non-colinear coordinate pairs &lt;/li&gt;
&lt;li&gt;&lt;span class="math"&gt;\(X\)&lt;/span&gt; and &lt;span class="math"&gt;\(Y\)&lt;/span&gt; vanishing points plus 2 more coordinate pairs which are not colinear with any vanishing point&lt;/li&gt;
&lt;li&gt;&lt;span class="math"&gt;\(X\)&lt;/span&gt; and &lt;span class="math"&gt;\(Y\)&lt;/span&gt; vanishing points plus other coordinate pairs which at least 2 pairs are colinear with &lt;span class="math"&gt;\(X\)&lt;/span&gt; vanishing point and 2 paris are colinear with &lt;span class="math"&gt;\(Y\)&lt;/span&gt; vanishing point, they can share one pair like the origin &lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Using which way to calculate &lt;span class="math"&gt;\(H\)&lt;/span&gt; depends on what you believe, if you think you can calculate the vanishing point very accurately, then use the vanishing point, if you think you are confident about the real 3D coordinate of some point in the image, then don't use vanishing point. Of course you can use all of them which are over determined, but don't worry, LU decomposition and Eigen3 will handle this. &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;"Edit"-"RPlane", choose a point in the image (black point) and specify its 3D coordinate, don't forget to use "Ctrl+LeftClick" to choose existed points and "Alt+d" to undo&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img width="400" alt=""coordinate pair"" title=""coordinate pair"" src="/images/singleVM/homopair.png"&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;"Calculation"-"Homography", calculate the homography matrix, it will ask you whether you wanna use &lt;span class="math"&gt;\(X\)&lt;/span&gt; and &lt;span class="math"&gt;\(Y\)&lt;/span&gt; vanishing points or not (if they are already calculated in previous step), you can choose based on your requirement&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img width="400" alt=""calculate homograph matrix"" title=""calculate homograph matrix"" src="/images/singleVM/homo.png"&gt;&lt;/p&gt;
&lt;p&gt;sample output (i choosed using the vanishing point here):&lt;/p&gt;
&lt;pre&gt;
Please specify 4 or more points on Z=0 plane (including vanishing points on this plane's vanishing line if they can be calculated and will be taken into account) and make sure these points could form a polygon

 A: 
 393.366  400.799        1        0        0        0       -0       -0
       0        0        0  393.366  400.799        1       -0       -0
 617.494  291.022        1        0        0        0 -617.494 -291.022
       0        0        0  617.494  291.022        1       -0       -0
 164.839  229.112        1        0        0        0       -0       -0
       0        0        0  164.839  229.112        1 -164.839 -229.112
 379.584  139.887        1        0        0        0 -379.584 -139.887
       0        0        0  379.584  139.887        1 -379.584 -139.887
       0        0        0   3841.3 -1287.98        1        0        0
       0        0        0        0        0        0   3841.3 -1287.98
-2678.48 -1907.01        1        0        0        0        0        0
       0        0        0        0        0        0 -2678.48 -1907.01

 b: 
 0
 0
 1
 0
 0
 1
 1
 1
 0
-1
 0
-1

 Rank of [A b]: 
8

 x: 
  0.00308069
 -0.00410059
    0.431674
    -0.00195
 -0.00398125
     2.36275
-5.74491e-05
  0.00060507

 A*x: 
-2.22045e-16
-2.22045e-16
           1
-1.77296e-10
 4.75542e-12
           1
    0.964602
      1.0028
           0
          -1
 4.44089e-16
          -1

 Homography matrix (from image to scene): 
  0.00308069  -0.00410059     0.431674
    -0.00195  -0.00398125      2.36275
-5.74491e-05   0.00060507            1

 Homography matrix (from scene to image): 
  218.915   -176.47   322.454
  -73.402  -125.643   328.547
0.0569898 0.0658845  0.819731
------------Point 1 ------------- 
 ImageCoord: 
393.366
400.799
      1

 HomoMat * ImageCoord: 
-1.82017e-16
-3.64034e-16
           1

 SceneCoord: 
0
0
1
------------Point 2 ------------- 
 ImageCoord: 
617.494
291.022
      1

 HomoMat * ImageCoord: 
           1
-1.55439e-10
           1

 SceneCoord: 
1
0
1
------------Point 3 ------------- 
 ImageCoord: 
164.839
229.112
      1

 HomoMat * ImageCoord: 
4.21147e-12
          1
          1

 SceneCoord: 
0
1
1
------------Point 4 ------------- 
 ImageCoord: 
379.584
139.887
      1

 HomoMat * ImageCoord: 
0.966694
 1.00263
       1

 SceneCoord: 
1
1
1
------------Point 5 ------------- 
 ImageCoord: 
  3841.3
-1287.98
       1

 HomoMat * ImageCoord: 
     17.547
4.44089e-16
          0

 SceneCoord: 
1
0
0
------------Point 6 ------------- 
 ImageCoord: 
-2678.48
-1907.01
       1

 HomoMat * ImageCoord: 
 4.44089e-16
     15.1781
-2.22045e-16

 SceneCoord: 
0
1
0
&lt;/pre&gt;

&lt;p&gt;&lt;em&gt;Note: HomoMat here is the inverse of &lt;span class="math"&gt;\(H\)&lt;/span&gt;&lt;/em&gt; &lt;/p&gt;
&lt;h4&gt;&lt;span class="math"&gt;\(\alpha_z\)&lt;/span&gt;&lt;/h4&gt;
&lt;p&gt;To calculate &lt;span class="math"&gt;\(\alpha_z\)&lt;/span&gt; is to determine the third column in &lt;span class="math"&gt;\(P\)&lt;/span&gt;, you need to first calculate the &lt;span class="math"&gt;\(Z\)&lt;/span&gt; vanishing point, and then sepecify 2 extra coordinatepairs which are colinear with &lt;span class="math"&gt;\(Z\)&lt;/span&gt; vanishing point (which means they have the same &lt;span class="math"&gt;\(X\)&lt;/span&gt; and &lt;span class="math"&gt;\(Y\)&lt;/span&gt; coordinates, and think of how to calculate &lt;span class="math"&gt;\(H\)&lt;/span&gt; with the 3rd method). The following is the derivation for calculation of &lt;span class="math"&gt;\(\alpha_z\)&lt;/span&gt; (which is &lt;span class="math"&gt;\(\gamma\)&lt;/span&gt;) from two scene points &lt;span class="math"&gt;\((X,Y,Z)\)&lt;/span&gt; and &lt;span class="math"&gt;\((X,Y,Z+\delta Z)\)&lt;/span&gt;, i use the notation which should be the same as those derivation in the materials i mentioned above, but here the two points &lt;span class="math"&gt;\(b\)&lt;/span&gt; and &lt;span class="math"&gt;\(t\)&lt;/span&gt; can be both off plane.&lt;/p&gt;
&lt;p&gt;&lt;img width="400" alt=""derivation of alpha_z"" title=""derivation of alpha_z"" src="/images/singleVM/SVMderivation.png"&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;"Edit"-"Zlines" to choose z parallel lines, then "Calculation"-"ZVpoint" to calculate &lt;span class="math"&gt;\(Z\)&lt;/span&gt; vanishing point (blue lines and endpoints)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img width="400" alt=""z parallel lines"" title=""z parallel lines"" src="/images/singleVM/zlines.png"&gt;&lt;/p&gt;
&lt;pre&gt;
Please pick up endpoints of lines pointing in Z direction

------------------------------------------------
5.34101e-05    -2.71212e-06    -0.0107707    
-2.71212e-06    2.05445e-07    0.000310135    
-0.0107707    0.000310135    3    

 Eigen Values: 
2.30787e-12
1.49136e-05
    3.00004

 Eigen Vectors: 
   -0.107822    -0.994164   0.00359024
    -0.99417     0.107822 -0.000103379
-0.000284333  -0.00358046    -0.999994

Vanishing point position: (379.211, 3496.5)
------------------------------------------------
&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;"Edit"-"RPlane" to specify 2 offplane scene points, the thin white line is connected to the &lt;span class="math"&gt;\(Z\)&lt;/span&gt; vanishing point&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img width="400" alt=""offplane point1"" title=""offplane point1"" src="/images/singleVM/zoffplane.png"&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;After specify the first scene point's coordinate, there will be a projected point on &lt;span class="math"&gt;\(Z=0\)&lt;/span&gt; plane and you can either choose that point as the second point or choose another off plane point if you like. Don't forget "Ctrl+LeftClick" and "Alt+d" if needed.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img width="400" alt=""offplane point2"" title=""offplane point2"" src="/images/singleVM/zoffplane2.png"&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;"Calculation"-"Alpha" to calculate &lt;span class="math"&gt;\(\alpha_z\)&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;
++++++++++++ All 4 Check ++++++++++++++
 P1: 
  218.915
  -73.402
0.0569898

 P2: 
  -176.47
 -125.643
0.0658845

 O: 
 322.454
 328.547
0.819731

 Vz: 
379.211
 3496.5
      1

 b: 
393.366
400.799
      1

 t: 
392.794
542.022
      1

 z: 0 deltaz: -1

 gammaZ: 
 -0.0391533

 Projection Matrix from scene to image: 
   218.915    -176.47   -14.8474    322.454
   -73.402   -125.643     -136.9    328.547
 0.0569898  0.0658845 -0.0391533   0.819731
&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;After calculate &lt;span class="math"&gt;\(Z\)&lt;/span&gt; vanishing point and &lt;span class="math"&gt;\(\alpha_z\)&lt;/span&gt;, we actually get the projection matrix &lt;span class="math"&gt;\(P\)&lt;/span&gt;, we can test it by "Calculation"-"Scene2Image", input the 3D scene coordinate,&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img width="400" alt=""scene to image"" title=""scene to image"" src="/images/singleVM/scene2img.png"&gt;&lt;/p&gt;
&lt;p&gt;it then shows the corresponding point in the image:&lt;/p&gt;
&lt;p&gt;&lt;img width="400" alt=""scene to image result"" title=""scene to image result"" src="/images/singleVM/scene2imgres.png"&gt;&lt;/p&gt;
&lt;h3&gt;How to generate texture patches and build 3D model (vrml file)&lt;/h3&gt;
&lt;p&gt;First you need to enter "Edit"-"PtPool" state, pick many points of interest in the image and using the later mentioned co-plane or co-z methods to get their 3D scene coordinates, this step will save all the points of interest in a pool, then enter "Edit"-"Polygon" state and choose points from the pool to form a polygon and use "Calculation"-"Texture" or ("Alt+p") to calculate the patches of this polygon, there are also bounding-box method or polygon method to calculate the patches. You can use "Alt+s" to switch between co-plane and co-z method if you are in "PtPool" state, or switch between bounding-box and polygon method if you are in "Polygon" (making patches using points in pool) state.&lt;/p&gt;
&lt;p&gt;Something to clarify:&lt;/p&gt;
&lt;p&gt;To get scene coordinate ("Edit"-"PtPool"):&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;co-plane method, when the previous point and next point are on the same plane, they share the same homography matrix&lt;/li&gt;
&lt;li&gt;co-z method, when the previous point and next point are colinear in z direction, the homograph matrix will be updated from &lt;span class="math"&gt;\([P_1, P_2, O_z]\)&lt;/span&gt; to &lt;span class="math"&gt;\([P_1, P_2, O_z+\gamma V_z\delta z]\)&lt;/span&gt;, actually in general, the homography matrix for plane &lt;span class="math"&gt;\(Z=z\)&lt;/span&gt; can be written as &lt;span class="math"&gt;\([P_1, P_2, O_0+\gamma V_zz]\)&lt;/span&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Start from a point in &lt;span class="math"&gt;\(Z=0\)&lt;/span&gt; plane, default is co-plane method, then select points of interest on this plane, when you want to jump to another &lt;span class="math"&gt;\(Z=z\)&lt;/span&gt; plane, first "Alt+s" to switch the mode, then select the projected point on the new plane (with help of the thin white line), after selection of the first point on the new plane, the method will be automatically switched back to co-plane method. Repeat this process untill you select all the points of interest. Dont forget the usage of "Alt+d" and "Ctrl+LeftClick" when needed. Also you can press "=" to enlarge the gap on the white line, or press "-" to make it smaller.&lt;/p&gt;
&lt;p&gt;&lt;div class="videobox"&gt;
            &lt;video width="240" height="180" preload="none" controls poster="/images/singleVM/ptpool.png"&gt;&lt;source src='/videos/singleVM/ptpool.ogv' type='video/ogg; codecs=theora, vorbis'&gt;&lt;/video&gt;&lt;/div&gt;&lt;/p&gt;
&lt;p&gt;output:
&lt;pre&gt;
Please pick up all the points which will be used to form polygons later, start from one point in the reference plane. 
You can change method state afterwards. Begin with co-plane methods. "Alt + S" could switch between co-plane and vertical methods.
Scene Coordinates: (-1.82017e-16, -3.64034e-16, 0)
Scene Coordinates: (1, -1.55439e-10, 0)
Scene Coordinates: (0.966694, 1.00263, 0)
Scene Coordinates: (4.21147e-12, 1, 0)
Scene Coordinates: (-1.82017e-16, -3.64034e-16, 0)
Scene Coordinates: (1, -1.55439e-10, 0)
Please select a previous point (Ctrl + LClick) first !
Scene Coordinates: (-1.82017e-16, -3.64034e-16, 0)
Scene Coordinates: (1, -1.55439e-10, 0)
Scene Coordinates: (0.966694, 1.00263, 0)
Please select a previous point (Ctrl + LClick) first !
Scene Coordinates: (0.966694, 1.00263, 0)
Scene Coordinates: (4.21147e-12, 1, 0)
Scene Coordinates: (4.21147e-12, 1, -1.00038)
Scene Coordinates: (2.66999e-05, -0.000287184, -1.00038)
Scene Coordinates: (0.999159, -0.000287184, -1.00038)
Scene Coordinates: (1.10566, 0.0653924, -1.00038)
Scene Coordinates: (1.10334, -0.368431, -1.00038)
Scene Coordinates: (0.847286, -0.541693, -1.00038)
Scene Coordinates: (-0.846693, 0.507535, -1.00038)
Scene Coordinates: (-0.191485, 1.26989, -1.00038)
Scene Coordinates: (0.0377504, 1.15913, -1.00038)
Scene Coordinates: (0.111889, 1.16806, -1.00038)
Scene Coordinates: (0.186364, 1.23369, -1.00038)
&lt;/pre&gt;&lt;/p&gt;
&lt;p&gt;To get the patches ("Edit"-"Polygon"):&lt;/p&gt;
&lt;p&gt;The problem in this step is given some nearlly co-plane 3D scene coordinates, we want to map them back to the image and using some interpolation method to get the RGB value of the scene points between pixels. My method is first calculate the plane equation, then calculate the rotation matrix which could rotate the plane into a &lt;span class="math"&gt;\(Z=z\)&lt;/span&gt; plane, and apply this rotation operation to all the scene points and get the coordinates of their corresponding points on &lt;span class="math"&gt;\(Z=z\)&lt;/span&gt; plane, then we find the polygon formed by these points (polygon method) or a bounding box (boundingbox method), to iterate the polygon area or the bounding box area, we need to set a scale which indicates the granularity of the patch (you need to adjust the scale value in makePatch() function according to the scene coordinates you input), for example, a 1 by 1 scene patch will have 100 by 100 points inside if you set scale to be 0.01.&lt;/p&gt;
&lt;p&gt;How to get the RGB value of a point inside the polygon or boundingbox, i will first rotate it from &lt;span class="math"&gt;\(XY\)&lt;/span&gt; plane to 3D scene position, then use projection matrix &lt;span class="math"&gt;\(P\)&lt;/span&gt; to find its scene pixel, then use &lt;a href="http://en.wikipedia.org/wiki/Bilinear_interpolation"&gt;Bilinear Interpolation&lt;/a&gt; method to get its RGB value.&lt;/p&gt;
&lt;p&gt;This video show we first use bounding box method to create a rectangle patch for 3 selected points, then "Alt+s" switch to polygon method and get a triangular patch from 3 points, next we show how to create a more complex polygon patch (when using polygon method, the points should be selected on clock-wise or counter clock-wise order). Also you can pick some points which are some tilted plane, it doesn't have to be horizontal or vertical plane.  &lt;/p&gt;
&lt;p&gt;&lt;div class="videobox"&gt;
            &lt;video width="240" height="180" preload="none" controls poster="/images/singleVM/patch.png"&gt;&lt;source src='/videos/singleVM/patch.ogv' type='video/ogg; codecs=theora, vorbis'&gt;&lt;/video&gt;&lt;/div&gt;&lt;/p&gt;
&lt;p&gt;output:&lt;/p&gt;
&lt;pre&gt;
Please select at least 3 points for each plane and make patch by press "Alt + P" or click "Texture" in "Calculation" menu, you can change TextureMethod (BoundingBox method or Polygon method) with "Alt + S", default: BoundingBox method

 Plane coefficients: 
 1.55483e-10
     1.00029
-0.000287158
-3.33004e-16

 Plane coefficients: 
 1.55483e-10
     1.00029
-0.000287158
-3.33004e-16

 Plane coefficients: 
 2.41128e-14
-3.58101e-13
    -2653.23
     2654.23
&lt;/pre&gt;

&lt;p&gt;To make vrml model:&lt;/p&gt;
&lt;p&gt;It takes me a long time to figure out what is the grammer of vrml model, the most simplest form is like the &lt;a href="http://www.cs.cornell.edu/courses/CS4670/2012fa/projects/p4/final_artifacts/Submissions/myw9/webpage/index.htm"&gt;Bookshelf&lt;/a&gt; example, by clicking "Edit"-"Save" function, the tool will combine all the patches together and create the .wrl file automatically.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt; When making point pools and generating patches, it's better to use incremental methods, which means add some points to the pool, then generate some patches using the newly add points, then add some other points to the pool and generate other patches. It's important to check at each time whether the scene coordinates of newly add points are acceptable, especially when you are jumping to another plane, because if there are some errors at some point, it will leads to incrementally larger error for the later added points. Basically, in this process, we have to be very careful and patient and make sure different paths to some point is consistent in an acceptable level. &lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;h3&gt;Paint Sample&lt;/h3&gt;
&lt;p&gt;For irregular object as the man and lion in this paint sample, when generating patches, you can first pick a rectangle which is big enough to hold the object, then use the &lt;a href="iscissor.html"&gt;intelligent scissor tool&lt;/a&gt; to pick out the object from old patch and use the picked out image as new patch.&lt;/p&gt;
&lt;p&gt;&lt;img width="500" alt=""paint vrml model"" title=""paint vrml model"" src="/images/singleVM/paintwrl.png"&gt;&lt;/p&gt;
&lt;p&gt;All the original pictures, generated patches and vrml models can be downloaded from &lt;a href="https://www.dropbox.com/s/04rv40bp68ieovm/TestSVMModels.zip"&gt;here&lt;/a&gt;. &lt;/p&gt;
&lt;script type="text/javascript"&gt;if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) {
    var align = "center",
        indent = "0em",
        linebreak = "false";

    if (false) {
        align = (screen.width &lt; 768) ? "left" : align;
        indent = (screen.width &lt; 768) ? "0em" : indent;
        linebreak = (screen.width &lt; 768) ? 'true' : linebreak;
    }

    var mathjaxscript = document.createElement('script');
    var location_protocol = (false) ? 'https' : document.location.protocol;
    if (location_protocol !== 'http' &amp;&amp; location_protocol !== 'https') location_protocol = 'https:';
    mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#';
    mathjaxscript.type = 'text/javascript';
    mathjaxscript.src = location_protocol + '//cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML';
    mathjaxscript[(window.opera ? "innerHTML" : "text")] =
        "MathJax.Hub.Config({" +
        "    config: ['MMLorHTML.js']," +
        "    TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'AMS' } }," +
        "    jax: ['input/TeX','input/MathML','output/HTML-CSS']," +
        "    extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js']," +
        "    displayAlign: '"+ align +"'," +
        "    displayIndent: '"+ indent +"'," +
        "    showMathMenu: true," +
        "    messageStyle: 'normal'," +
        "    tex2jax: { " +
        "        inlineMath: [ ['\\\\(','\\\\)'] ], " +
        "        displayMath: [ ['$$','$$'] ]," +
        "        processEscapes: true," +
        "        preview: 'TeX'," +
        "    }, " +
        "    'HTML-CSS': { " +
        "        styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'inherit ! important'} }," +
        "        linebreaks: { automatic: "+ linebreak +", width: '90% container' }," +
        "    }, " +
        "}); " +
        "if ('default' !== 'default') {" +
            "MathJax.Hub.Register.StartupHook('HTML-CSS Jax Ready',function () {" +
                "var VARIANT = MathJax.OutputJax['HTML-CSS'].FONTDATA.VARIANT;" +
                "VARIANT['normal'].fonts.unshift('MathJax_default');" +
                "VARIANT['bold'].fonts.unshift('MathJax_default-bold');" +
                "VARIANT['italic'].fonts.unshift('MathJax_default-italic');" +
                "VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');" +
            "});" +
            "MathJax.Hub.Register.StartupHook('SVG Jax Ready',function () {" +
                "var VARIANT = MathJax.OutputJax.SVG.FONTDATA.VARIANT;" +
                "VARIANT['normal'].fonts.unshift('MathJax_default');" +
                "VARIANT['bold'].fonts.unshift('MathJax_default-bold');" +
                "VARIANT['italic'].fonts.unshift('MathJax_default-italic');" +
                "VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');" +
            "});" +
        "}";
    (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript);
}
&lt;/script&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Zheng Rui</dc:creator><pubDate>Mon, 26 May 2014 00:00:00 +0800</pubDate><guid isPermaLink="false">tag:,2014-05-26:singleviewmetrology.html</guid><category>Computer Vision</category><category>Project</category></item><item><title>Dense Light Stereo</title><link>/denselightstereo.html</link><description>&lt;p&gt;This computer vision project is to build 3D model of objects based on dense light images, code can be downloaded from &lt;a href="https://github.com/ZhengRui/Dense-Light-Stereo"&gt;here&lt;/a&gt;, for the description and relevant papers check README in the code, here only shows the results.&lt;/p&gt;
&lt;p&gt;Smoother parameter &lt;span class="math"&gt;\(\sigma\)&lt;/span&gt; can not be too large, either too small. The larger, it will have no smooth effect, the smaller, it will be over smoothed.&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;strong&gt;denorminator image&lt;/strong&gt;&lt;/th&gt;
&lt;th&gt;&lt;strong&gt;initial normals&lt;/strong&gt;&lt;/th&gt;
&lt;th&gt;&lt;strong&gt;refined normals&lt;/strong&gt;&lt;/th&gt;
&lt;th&gt;&lt;strong&gt;stereo&lt;/strong&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;img src="/images/denseLightStereo/data02_denorm_gray.png"&gt;&lt;/td&gt;
&lt;td&gt;&lt;img src="/images/denseLightStereo/data02_initnorm.png"&gt;&lt;/td&gt;
&lt;td&gt;&lt;img src="/images/denseLightStereo/data02_optnorm.png"&gt;&lt;/td&gt;
&lt;td&gt;&lt;img width="200" src="/images/denseLightStereo/data02_stereo.png"&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;img src="/images/denseLightStereo/small_denorm_gray.png"&gt;&lt;/td&gt;
&lt;td&gt;&lt;img src="/images/denseLightStereo/small_initnorm.png"&gt;&lt;/td&gt;
&lt;td&gt;&lt;img src="/images/denseLightStereo/small_optnorm.png"&gt;&lt;/td&gt;
&lt;td&gt;&lt;img width="200" src="/images/denseLightStereo/small_stereo.png"&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;img src="/images/denseLightStereo/data04_denorm_gray.png"&gt;&lt;/td&gt;
&lt;td&gt;&lt;img src="/images/denseLightStereo/data04_initnorm.png"&gt;&lt;/td&gt;
&lt;td&gt;&lt;img src="/images/denseLightStereo/data04_optnorm.png"&gt;&lt;/td&gt;
&lt;td&gt;&lt;img width="200" src="/images/denseLightStereo/data04_stereo.png"&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;img src="/images/denseLightStereo/data05_denorm_gray.png"&gt;&lt;/td&gt;
&lt;td&gt;&lt;img src="/images/denseLightStereo/data05_initnorm.png"&gt;&lt;/td&gt;
&lt;td&gt;&lt;img src="/images/denseLightStereo/data05_optnorm.png"&gt;&lt;/td&gt;
&lt;td&gt;&lt;img width="200" src="/images/denseLightStereo/data05_stereo.png"&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;img src="/images/denseLightStereo/data06_denorm_gray.png"&gt;&lt;/td&gt;
&lt;td&gt;&lt;img src="/images/denseLightStereo/data06_initnorm.png"&gt;&lt;/td&gt;
&lt;td&gt;&lt;img src="/images/denseLightStereo/data06_optnorm.png"&gt;&lt;/td&gt;
&lt;td&gt;&lt;img width="200" src="/images/denseLightStereo/data06_stereo.png"&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;img src="/images/denseLightStereo/data07_denorm_gray.png"&gt;&lt;/td&gt;
&lt;td&gt;&lt;img src="/images/denseLightStereo/data07_initnorm.png"&gt;&lt;/td&gt;
&lt;td&gt;&lt;img src="/images/denseLightStereo/data07_optnorm.png"&gt;&lt;/td&gt;
&lt;td&gt;&lt;img width="200" src="/images/denseLightStereo/data07_stereo.png"&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;img width="200" src="/images/denseLightStereo/data08_denorm_gray.png"&gt;&lt;/td&gt;
&lt;td&gt;&lt;img width="200" src="/images/denseLightStereo/data08_initnorm.png"&gt;&lt;/td&gt;
&lt;td&gt;&lt;img width="200" src="/images/denseLightStereo/data08_optnorm.png"&gt;&lt;/td&gt;
&lt;td&gt;&lt;img width="200" src="/images/denseLightStereo/data08_stereo.png"&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;img width="200" src="/images/denseLightStereo/data09_denorm_gray.png"&gt;&lt;/td&gt;
&lt;td&gt;&lt;img width="200" src="/images/denseLightStereo/data09_initnorm.png"&gt;&lt;/td&gt;
&lt;td&gt;&lt;img width="200" src="/images/denseLightStereo/data09_optnorm.png"&gt;&lt;/td&gt;
&lt;td&gt;&lt;img width="200" src="/images/denseLightStereo/data09_stereo.png"&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;script type="text/javascript"&gt;if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) {
    var align = "center",
        indent = "0em",
        linebreak = "false";

    if (false) {
        align = (screen.width &lt; 768) ? "left" : align;
        indent = (screen.width &lt; 768) ? "0em" : indent;
        linebreak = (screen.width &lt; 768) ? 'true' : linebreak;
    }

    var mathjaxscript = document.createElement('script');
    var location_protocol = (false) ? 'https' : document.location.protocol;
    if (location_protocol !== 'http' &amp;&amp; location_protocol !== 'https') location_protocol = 'https:';
    mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#';
    mathjaxscript.type = 'text/javascript';
    mathjaxscript.src = location_protocol + '//cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML';
    mathjaxscript[(window.opera ? "innerHTML" : "text")] =
        "MathJax.Hub.Config({" +
        "    config: ['MMLorHTML.js']," +
        "    TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'AMS' } }," +
        "    jax: ['input/TeX','input/MathML','output/HTML-CSS']," +
        "    extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js']," +
        "    displayAlign: '"+ align +"'," +
        "    displayIndent: '"+ indent +"'," +
        "    showMathMenu: true," +
        "    messageStyle: 'normal'," +
        "    tex2jax: { " +
        "        inlineMath: [ ['\\\\(','\\\\)'] ], " +
        "        displayMath: [ ['$$','$$'] ]," +
        "        processEscapes: true," +
        "        preview: 'TeX'," +
        "    }, " +
        "    'HTML-CSS': { " +
        "        styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'inherit ! important'} }," +
        "        linebreaks: { automatic: "+ linebreak +", width: '90% container' }," +
        "    }, " +
        "}); " +
        "if ('default' !== 'default') {" +
            "MathJax.Hub.Register.StartupHook('HTML-CSS Jax Ready',function () {" +
                "var VARIANT = MathJax.OutputJax['HTML-CSS'].FONTDATA.VARIANT;" +
                "VARIANT['normal'].fonts.unshift('MathJax_default');" +
                "VARIANT['bold'].fonts.unshift('MathJax_default-bold');" +
                "VARIANT['italic'].fonts.unshift('MathJax_default-italic');" +
                "VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');" +
            "});" +
            "MathJax.Hub.Register.StartupHook('SVG Jax Ready',function () {" +
                "var VARIANT = MathJax.OutputJax.SVG.FONTDATA.VARIANT;" +
                "VARIANT['normal'].fonts.unshift('MathJax_default');" +
                "VARIANT['bold'].fonts.unshift('MathJax_default-bold');" +
                "VARIANT['italic'].fonts.unshift('MathJax_default-italic');" +
                "VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');" +
            "});" +
        "}";
    (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript);
}
&lt;/script&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Zheng Rui</dc:creator><pubDate>Tue, 13 May 2014 00:00:00 +0800</pubDate><guid isPermaLink="false">tag:,2014-05-13:denselightstereo.html</guid><category>Computer Vision</category><category>Project</category></item><item><title>Intelligent Scissor</title><link>/iscissor.html</link><description>&lt;p&gt;This computer vision project is to realize the function of cutting out the objects you are interested inside a picture and then save it as another picture which has transparent background except the cut out objects. You can download the code from &lt;a href="https://github.com/ZhengRui/Intelligent-Scissor"&gt;here&lt;/a&gt;. Here is an example of Lena picken out from that "You know what i am talking about" iamge:&lt;/p&gt;
&lt;p&gt;&lt;img width="200" alt=""Lena Only"" title=""Lena Only"" src="/images/iScissor/lena_cut.png"&gt;&lt;/p&gt;
&lt;p&gt;The idea is simple, just need to understand following concepts:&lt;/p&gt;
&lt;h3&gt;Pixel Node&lt;/h3&gt;
&lt;p&gt;one pixel becomes a 3by3 matrix with the original pixel in the center and other 8 additional pixel saves the link cost in that direction.&lt;/p&gt;
&lt;p&gt;&lt;img width="200" alt=""Pixel Node"" title=""Pixel Node"" src="/images/iScissor/pixelnode.jpg"&gt;&lt;/p&gt;
&lt;p&gt;so the Pixnode picture will be 9 times larger as the original picture.&lt;/p&gt;
&lt;h3&gt;Cost Function&lt;/h3&gt;
&lt;p&gt;For vertical or horizental link:&lt;/p&gt;
&lt;div class="math"&gt;$$
D_{link1} = \frac{|Img(i+1,j)-Img(i,j-1)|}{\sqrt{2}} 
$$&lt;/div&gt;
&lt;p&gt;For diagonal link:&lt;/p&gt;
&lt;div class="math"&gt;$$
D_{link0} = \frac{|Img(i,j-1)+Img(i+1,j-1)-Img(i,j+1)-Img(i+1,j+1)|}{4}
$$&lt;/div&gt;
&lt;p&gt;Define &lt;span class="math"&gt;\(D_{max}\)&lt;/span&gt; as the maximum link cost among all the links in the picture.
Then the final cost function we will use later can be defined as:&lt;/p&gt;
&lt;div class="math"&gt;$$
C_{link} = (\sqrt{maxD}-\sqrt{D_{link}})*length_{link}
$$&lt;/div&gt;
&lt;p&gt;where &lt;span class="math"&gt;\(length_{link}\)&lt;/span&gt; is 1 for horizental and vertical links, 0 for diagonal links. The reason i put &lt;span class="math"&gt;\(\sqrt{}\)&lt;/span&gt; here is because&lt;/p&gt;
&lt;div class="math"&gt;$$
\frac{\sqrt{y_2}-\sqrt{y_1}}{\sqrt{y_1}-\sqrt{y_0}} \lt \frac{y_2-y_1}{y_1-y_0} \qquad where \quad y_0 \lt y_1 \lt y_2 
$$&lt;/div&gt;
&lt;p&gt;Above is for the calculation of 1 color channel, if you have an RGB image, each link's cost can be &lt;/p&gt;
&lt;div class="math"&gt;$$
D_{link} = \sqrt{\frac{DR_{link}^2+DG_{link}^2+DB_{link}^2}{3}}
$$&lt;/div&gt;
&lt;h3&gt;Minimum Cost Path&lt;/h3&gt;
&lt;p&gt;Because the link along the edge has the minimum link cost (&lt;span class="math"&gt;\(C\)&lt;/span&gt; not &lt;span class="math"&gt;\(D\)&lt;/span&gt;), so from a source point to a destination point, if we find its minimum cost path, it will try to follow the edges, this is the idea. Just use &lt;strong&gt;Dijkstra Algorithm&lt;/strong&gt; with datastructure of &lt;strong&gt;Fibonacci Heap&lt;/strong&gt; to find the minimum cost path. &lt;/p&gt;
&lt;h3&gt;Usage&lt;/h3&gt;
&lt;p&gt;After loading a picture, you can zoom in zoom out and drag by right click, it will be shown like this&lt;/p&gt;
&lt;p&gt;&lt;img width="600" alt=""IScissor"" title=""IScissor"" src="/images/iScissor/iscissor1.png"&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;1: show pixel node graph&lt;/li&gt;
&lt;li&gt;2: show cost graph&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Pixel node graph and cost graph are calculated when the picture is loaded. 
Pixel node graph:&lt;/p&gt;
&lt;p&gt;&lt;img width="600" alt=""Pixel Node Graph"" title=""Pixel Node Graph"" src="/images/iScissor/iscissorpixelnode.png"&gt;&lt;/p&gt;
&lt;p&gt;Cost Graph:&lt;/p&gt;
&lt;p&gt;&lt;img width="600" alt=""Cost Graph"" title=""Cost Graph"" src="/images/iScissor/iscissorcg.png"&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;3: show path tree&lt;/li&gt;
&lt;li&gt;4: show minimum path from seed to cursor&lt;/li&gt;
&lt;li&gt;5: show animation of &lt;strong&gt;Dijkstra Algorithm&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;By clicking on the picture, you can put a seed there. Before the first click of the picture, clicking 3 4 5 will not response because there is no seed yet. When you click on the picture, the path tree is generated. Here is a path tree (Can you find the seed node?):&lt;/p&gt;
&lt;p&gt;&lt;img width="600" alt=""Path Tree"" title=""Path Tree"" src="/images/iScissor/iscissorpt.png"&gt;&lt;/p&gt;
&lt;p&gt;when you click again on the image, the seed is changed, you have to close the opencv windown and click 3 again to see the updated path tree.&lt;/p&gt;
&lt;p&gt;5 is a like a checkbox button, when it's on, everytime you click on the picture, it will show the animation of generating the path tree.&lt;/p&gt;
&lt;p&gt;&lt;div class="videobox"&gt;
            &lt;video width="240" height="180" preload="none" controls poster="/images/iScissor/iscissorpt.png"&gt;&lt;source src='/videos/iScissor/dijkstra.mp4' type='video/mp4; codecs="avc1.42E01E, mp4a.40.2"'&gt;&lt;/video&gt;&lt;/div&gt;&lt;/p&gt;
&lt;p&gt;The above animation can be shown in Chrome.&lt;/p&gt;
&lt;p&gt;After clicking 4 or press "F", you will enter the mode of scissoring the part you want. Put seed by clicking on the image, and move your mouse, you will see &lt;/p&gt;
&lt;p&gt;&lt;img width="600" src="/images/iScissor/iscissor2.png"&gt;&lt;/p&gt;
&lt;p&gt;the path will show both in QGraphicsView and opencv window. &lt;strong&gt;There are two lines, green line is minimum cost path from seed to the cursor, blue line is minimum cost path from seed to a pixel which is in a certain range of the cursor but has the minimum cost link within the range. You can choose cursor as next seed point by clicking or you can choose the blue ends as next seed point by "Ctrl"+click.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;You can pause scissoring mode by clicking 4 or press "F", then you can select the path segments and delete the selected segment by pressing "D".&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;Note&lt;/em&gt;&lt;/strong&gt;: &lt;strong&gt;Better delete with reverse order, from nearest to oldest segments, other wise when "save" in last step, it will have problem because the polygon is formed assumed that the segments is clock wise or counter clock wise sorted.&lt;/strong&gt; Of course i could sort the segments before forming the polygon so that the segment can be deleted arbitrarily, but now i haven't implement the sort function.&lt;/p&gt;
&lt;p&gt;You can press "F" or click 4 to enter scissoring mode again, and at last if you think it should be closed, press &lt;strong&gt;"Ctrl"+"B", the cursor will go back to the first seed point&lt;/strong&gt;. Then press "F", quit from the scissoring mode and you can save the cutted part.&lt;/p&gt;
&lt;p&gt;Here is a composite&lt;/p&gt;
&lt;p&gt;&lt;img width="600" src="/images/iScissor/iscissorcomposite.png"&gt;&lt;/p&gt;
&lt;script type="text/javascript"&gt;if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) {
    var align = "center",
        indent = "0em",
        linebreak = "false";

    if (false) {
        align = (screen.width &lt; 768) ? "left" : align;
        indent = (screen.width &lt; 768) ? "0em" : indent;
        linebreak = (screen.width &lt; 768) ? 'true' : linebreak;
    }

    var mathjaxscript = document.createElement('script');
    var location_protocol = (false) ? 'https' : document.location.protocol;
    if (location_protocol !== 'http' &amp;&amp; location_protocol !== 'https') location_protocol = 'https:';
    mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#';
    mathjaxscript.type = 'text/javascript';
    mathjaxscript.src = location_protocol + '//cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML';
    mathjaxscript[(window.opera ? "innerHTML" : "text")] =
        "MathJax.Hub.Config({" +
        "    config: ['MMLorHTML.js']," +
        "    TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'AMS' } }," +
        "    jax: ['input/TeX','input/MathML','output/HTML-CSS']," +
        "    extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js']," +
        "    displayAlign: '"+ align +"'," +
        "    displayIndent: '"+ indent +"'," +
        "    showMathMenu: true," +
        "    messageStyle: 'normal'," +
        "    tex2jax: { " +
        "        inlineMath: [ ['\\\\(','\\\\)'] ], " +
        "        displayMath: [ ['$$','$$'] ]," +
        "        processEscapes: true," +
        "        preview: 'TeX'," +
        "    }, " +
        "    'HTML-CSS': { " +
        "        styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'inherit ! important'} }," +
        "        linebreaks: { automatic: "+ linebreak +", width: '90% container' }," +
        "    }, " +
        "}); " +
        "if ('default' !== 'default') {" +
            "MathJax.Hub.Register.StartupHook('HTML-CSS Jax Ready',function () {" +
                "var VARIANT = MathJax.OutputJax['HTML-CSS'].FONTDATA.VARIANT;" +
                "VARIANT['normal'].fonts.unshift('MathJax_default');" +
                "VARIANT['bold'].fonts.unshift('MathJax_default-bold');" +
                "VARIANT['italic'].fonts.unshift('MathJax_default-italic');" +
                "VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');" +
            "});" +
            "MathJax.Hub.Register.StartupHook('SVG Jax Ready',function () {" +
                "var VARIANT = MathJax.OutputJax.SVG.FONTDATA.VARIANT;" +
                "VARIANT['normal'].fonts.unshift('MathJax_default');" +
                "VARIANT['bold'].fonts.unshift('MathJax_default-bold');" +
                "VARIANT['italic'].fonts.unshift('MathJax_default-italic');" +
                "VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');" +
            "});" +
        "}";
    (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript);
}
&lt;/script&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Zheng Rui</dc:creator><pubDate>Wed, 26 Mar 2014 00:00:00 +0800</pubDate><guid isPermaLink="false">tag:,2014-03-26:iscissor.html</guid><category>Computer Vision</category><category>Project</category></item><item><title>About me</title><link>/about-me.html</link><description>&lt;h3&gt;This is me&lt;/h3&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Zheng Rui</dc:creator><pubDate>Sun, 11 Aug 2013 00:00:00 +0800</pubDate><guid isPermaLink="false">tag:,2013-08-11:about-me.html</guid></item></channel></rss>